{"version":3,"file":"4b12f3bb00879d2a5a16.min.js","mappings":"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","sources":["webpack://vector/./src/graphic/elements/circle.ts","webpack://vector/./src/graphic/elements/ellipse.ts","webpack://vector/./src/graphic/elements/line.ts","webpack://vector/./src/graphic/elements/path.ts","webpack://vector/./src/graphic/elements/polygon.ts","webpack://vector/./src/graphic/elements/polyline.ts","webpack://vector/./src/graphic/elements/rect.ts","webpack://vector/./src/graphic/plane/index.ts","webpack://vector/./src/graphic/render/index.ts","webpack://vector/./src/graphic/transformation/index.ts","webpack://vector/./src/new_document/index.ts","webpack://vector/./src/utilities/lazy-css.ts","webpack://vector/./src/index.ts","webpack://vector/./src/utilities/index.ts"],"sourcesContent":["import { x, y, cx, cy, r, fill, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\n\nexport interface circle {\n  x: x;\n  y: y;\n  cx: cx;\n  cy: cy;\n  r: r;\n\n  fill?: fill;\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform;\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildCircle(x: x, y: y, cx: cx, cy: cy, r: r, fill: fill, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): circle {\n  return {\n    x: x || 0,\n    y: y || 0,\n    cx: cx || 0,\n    cy: cy || 0,\n    r: r || 0,\n    fill: fill || 'none',\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'circle'\n  };\n}\n","import { cx, cy, rx, ry, fill, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType, x, y } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\n\nexport interface ellipse {\n  x: x;\n  y: y;\n  cx: cx;\n  cy: cy;\n  rx: rx;\n  ry: ry;\n\n  fill?: fill;\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform;\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildEllipse(x: x, y: y, cx: cx, cy: cy, rx: rx, ry: ry, fill: fill, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): ellipse {\n  return {\n    x: x || 0,\n    y: y || 0,\n    cx: cx || 0,\n    cy: cy || 0,\n    rx: rx || 0,\n    ry: ry || 0,\n    fill: fill || 'none',\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'ellipse'\n  };\n}\n","import { x, y, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\n\nexport interface line {\n  x1: x;\n  y1: y;\n  x2: x;\n  y2: y;\n\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform; // Transformations applied to the line\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildLine(x1: x, y1: y, x2: x, y2: y, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): line {\n  return {\n    x1: x1 || 0,\n    y1: y1 || 0,\n    x2: x2 || 0,\n    y2: y2 || 0,\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'line'\n  };\n}\n","import { d, fill, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType, point, points, boundingBox } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\nimport { rect } from './rect';\nimport { circle } from './circle';\nimport { ellipse } from './ellipse';\nimport { line } from './line';\nimport { polyline } from './polyline';\nimport { polygon } from './polygon';\nimport { element } from './index';\nimport { transformPoints } from '../transformation/index';\n\nexport interface path {\n  d: d;\n\n  fill?: fill;\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform; // Transformations applied to the path\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildPath(d: d, fill: fill, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): path {\n  return {\n    d: d || [],\n    fill: fill || 'none',\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'path'\n  };\n}\n\nexport function samplePathCommands(commands: d, precision: number = 1, detailedCurve: boolean = false): points {\n  function interpolateLinear(p0: point, p1: point, precision: number): points {\n    let segmentPoints: points = [];\n    const distance = Math.hypot(p1.x - p0.x, p1.y - p0.y);\n    const step = distance / precision;\n    for (let i = 0; i <= step; i++) {\n      const t = i / step;\n      const x = p0.x + (p1.x - p0.x) * t;\n      const y = p0.y + (p1.y - p0.y) * t;\n      segmentPoints.push({ x, y });\n    }\n    return segmentPoints;\n  }\n\n  function interpolateCubicBezier(p0: point, c1: point, c2: point, p1: point, precision: number, detailedCurve: boolean): points {\n    let segmentPoints: points = [];\n    const distance = Math.hypot(p1.x - p0.x, p1.y - p0.y);\n    let step = Math.round(distance / precision);\n    if (detailedCurve) {\n      step *= 1.5;\n    }\n    for (let i = 0; i <= step; i++) {\n      const t = i / step;\n      const x = Math.pow(1 - t, 3) * p0.x + 3 * Math.pow(1 - t, 2) * t * c1.x + 3 * (1 - t) * Math.pow(t, 2) * c2.x + Math.pow(t, 3) * p1.x;\n      const y = Math.pow(1 - t, 3) * p0.y + 3 * Math.pow(1 - t, 2) * t * c1.y + 3 * (1 - t) * Math.pow(t, 2) * c2.y + Math.pow(t, 3) * p1.y;\n      segmentPoints.push({ x, y });\n    }\n    return segmentPoints;\n  }\n\n  function interpolateQuadraticBezier(p0: point, c: point, p1: point, precision: number, detailedCurve: boolean): points {\n    let segmentPoints: points = [];\n    const distance = Math.hypot(p1.x - p0.x, p1.y - p0.y);\n    let step = Math.round(distance / precision);\n    if (detailedCurve) {\n      step *= 1.5;\n    }\n    for (let i = 0; i <= step; i++) {\n      const t = i / step;\n      const x = Math.pow(1 - t, 2) * p0.x + 2 * (1 - t) * t * p1.x + Math.pow(t, 2) * c.x;\n      const y = Math.pow(1 - t, 2) * p0.y + 2 * (1 - t) * t * p1.y + Math.pow(t, 2) * c.y;\n      segmentPoints.push({ x, y });\n    }\n    return segmentPoints;\n  }\n\n  function interpolateArc(p0: point, rx: number, ry: number, xAxisRotation: number, largeArcFlag: 0 | 1, sweepFlag: 0 | 1, x: number, y: number, precision: number, detailedCurve: boolean): points {\n    const distance = Math.hypot(x - p0.x, y - p0.y);\n    let step = Math.round(distance / precision);\n    if (detailedCurve) {\n      step *= 1.5;\n    }\n\n    // Helper to convert degrees to radians\n    const degToRad = (deg) => (deg * Math.PI) / 180;\n\n    // Calculate rotation matrix\n    const rotationRad = degToRad(xAxisRotation);\n    const cosRot = Math.cos(rotationRad);\n    const sinRot = Math.sin(rotationRad);\n\n    // Compute center of the ellipse and the angles\n    const dx = (p0.x - x) / 2;\n    const dy = (p0.y - y) / 2;\n\n    // Transform to the ellipse's coordinate space\n    const x1p = cosRot * dx + sinRot * dy;\n    const y1p = -sinRot * dx + cosRot * dy;\n\n    // Correct radii if necessary\n    const rxSq = rx ** 2;\n    const rySq = ry ** 2;\n    const x1pSq = x1p ** 2;\n    const y1pSq = y1p ** 2;\n\n    let radicant = (rxSq * rySq - rxSq * y1pSq - rySq * x1pSq) / (rxSq * y1pSq + rySq * x1pSq);\n    radicant = Math.max(0, radicant); // Ensure non-negative\n    const coef = (largeArcFlag !== sweepFlag ? 1 : -1) * Math.sqrt(radicant);\n\n    const cxp = coef * ((rx * y1p) / ry);\n    const cyp = coef * (-(ry * x1p) / rx);\n\n    // Transform back to the original coordinate space\n    const cx = cosRot * cxp - sinRot * cyp + (p0.x + x) / 2;\n    const cy = sinRot * cxp + cosRot * cyp + (p0.y + y) / 2;\n\n    // Start and end angles\n    const theta1 = Math.atan2((y1p - cyp) / ry, (x1p - cxp) / rx);\n    const deltaTheta = Math.atan2((-y1p - cyp) / ry, (-x1p - cxp) / rx) - theta1;\n\n    // Ensure the angle is swept in the correct direction\n    const adjustedDeltaTheta = sweepFlag === 0 && deltaTheta > 0 ? deltaTheta - 2 * Math.PI : deltaTheta;\n    const finalDeltaTheta = sweepFlag === 1 && deltaTheta < 0 ? deltaTheta + 2 * Math.PI : adjustedDeltaTheta;\n\n    // Sample the arc\n    const segmentPoints = [];\n    for (let i = 0; i <= step; i++) {\n      const t = i / step; // Proportion of the arc\n      const theta = theta1 + t * finalDeltaTheta;\n\n      // Parametric equation of the ellipse\n      const x = cosRot * (rx * Math.cos(theta)) - sinRot * (ry * Math.sin(theta)) + cx;\n      const y = sinRot * (rx * Math.cos(theta)) + cosRot * (ry * Math.sin(theta)) + cy;\n\n      segmentPoints.push({ x, y });\n    }\n    return segmentPoints;\n  }\n\n  let points: points = [];\n  let currentPoint: point = { x: 0, y: 0 };\n  let previousControlPoint: point | null = null;\n\n  for (const command of commands) {\n    switch (command.type) {\n      case 'M':\n        currentPoint = { x: command.x, y: command.y };\n        points.push(currentPoint);\n        previousControlPoint = null;\n        break;\n      case 'L':\n        const lineEnd = { x: command.x, y: command.y };\n        points.push(...interpolateLinear(currentPoint, lineEnd, precision));\n        currentPoint = lineEnd;\n        previousControlPoint = null;\n        break;\n      case 'H':\n        const horizontalEnd = { x: command.x, y: currentPoint.y };\n        points.push(...interpolateLinear(currentPoint, horizontalEnd, precision));\n        currentPoint = horizontalEnd;\n        previousControlPoint = null;\n        break;\n      case 'V':\n        const verticalEnd = { x: currentPoint.x, y: command.y };\n        points.push(...interpolateLinear(currentPoint, verticalEnd, precision));\n        currentPoint = verticalEnd;\n        previousControlPoint = null;\n        break;\n      case 'C':\n        const cubicStart = currentPoint;\n        const cubicControl1 = { x: command.x1, y: command.y1 };\n        const cubicControl2 = { x: command.x2, y: command.y2 };\n        const cubicEnd = { x: command.x, y: command.y };\n        points.push(...interpolateCubicBezier(cubicStart, cubicControl1, cubicControl2, cubicEnd, precision, detailedCurve));\n        currentPoint = cubicEnd;\n        previousControlPoint = cubicControl2;\n        break;\n      case 'S':\n        const smoothStart = currentPoint;\n        const smoothControl1 = previousControlPoint ? { x: 2 * smoothStart.x - previousControlPoint.x, y: 2 * smoothStart.y - previousControlPoint.y } : smoothStart;\n        const smoothControl2 = { x: command.x2, y: command.y2 };\n        const smoothEnd = { x: command.x, y: command.y };\n        points.push(...interpolateCubicBezier(smoothStart, smoothControl1, smoothControl2, smoothEnd, precision, detailedCurve));\n        currentPoint = smoothEnd;\n        previousControlPoint = smoothControl2;\n        break;\n      case 'Q':\n        const quadStart = currentPoint;\n        const quadControl = { x: command.x, y: command.y };\n        const quadEnd = { x: command.x1, y: command.y1 };\n        points.push(...interpolateQuadraticBezier(quadStart, quadControl, quadEnd, precision, detailedCurve));\n        currentPoint = quadEnd;\n        previousControlPoint = quadControl;\n        break;\n      case 'T':\n        const smoothQuadStart = currentPoint;\n        const smoothQuadControl = previousControlPoint ? { x: 2 * smoothQuadStart.x - previousControlPoint.x, y: 2 * smoothQuadStart.y - previousControlPoint.y } : smoothQuadStart;\n        const smoothQuadEnd = { x: command.x, y: command.y };\n        points.push(...interpolateQuadraticBezier(smoothQuadStart, smoothQuadControl, smoothQuadEnd, precision, detailedCurve));\n        currentPoint = smoothQuadEnd;\n        previousControlPoint = smoothQuadControl;\n        break;\n      case 'A':\n        points.push(...interpolateArc(currentPoint, command.rx, command.ry, command.xAxisRotation, command.largeArcFlag, command.sweepFlag, command.x, command.y, precision, detailedCurve));\n        currentPoint = { x: command.x, y: command.y };\n        previousControlPoint = null;\n        break;\n      case 'Z':\n        if (points.length > 0) {\n          points.push(points[0]); // Close path by connecting to the start\n        }\n        previousControlPoint = null;\n        break;\n      default:\n        throw new Error(`Unsupported command type: ${command.type}`);\n    }\n  }\n  return points;\n}\n\nexport function samplePath(path: path, precision: number = 1, flatten: boolean = false, detailedCurve: boolean = false): points {\n  let points = samplePathCommands(path.d, precision, detailedCurve);\n  if (flatten) {\n    if (typeof path.transform === 'object' && Array.isArray(path.transform)) {\n      if (path.transform.length > 0) {\n        points = transformPoints(points, path.transform);\n      }\n    }\n  }\n  return points;\n}\n\nexport function smoothPath(path: path): path {\n  function simplifyPoints(points: points, tolerance: number): points {\n    function distanceToSegment(point: point, start: point, end: point): number {\n      let dx = end.x - start.x;\n      let dy = end.y - start.y;\n      let d = dx * dx + dy * dy;\n      let t = ((point.x - start.x) * dx + (point.y - start.y) * dy) / d;\n\n      if (t < 0) {\n        dx = point.x - start.x;\n        dy = point.y - start.y;\n      } else if (t > 1) {\n        dx = point.x - end.x;\n        dy = point.y - end.y;\n      } else {\n        var closestPoint = { x: start.x + t * dx, y: start.y + t * dy };\n        dx = point.x - closestPoint.x;\n        dy = point.y - closestPoint.y;\n      }\n\n      return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    if (points.length < 3) {\n      return points;\n    }\n\n    let dmax = 0;\n    let index = 0;\n\n    // Find the point with the maximum distance\n    for (let i = 1; i < points.length - 1; i++) {\n      let d = distanceToSegment(points[i], points[0], points[points.length - 1]);\n      if (d > dmax) {\n        index = i;\n        dmax = d;\n      }\n    }\n\n    // If max distance is greater than tolerance, split the curve\n    if (dmax > tolerance) {\n      let leftPoints = points.slice(0, index + 1);\n      let rightPoints = points.slice(index);\n      let simplifiedLeft = simplifyPoints(leftPoints, tolerance);\n      let simplifiedRight = simplifyPoints(rightPoints, tolerance);\n      return simplifiedLeft.slice(0, simplifiedLeft.length - 1).concat(simplifiedRight);\n    } else {\n      return [points[0], points[points.length - 1]];\n    }\n  }\n\n  const points = samplePath(path, 1, false, false);\n  const simplifiedPoints = simplifyPoints(points, 1);\n  const simplifiedPointsLength = simplifiedPoints.length;\n  let simplifiedCommands = [];\n\n  for (let i = 0; i < simplifiedPointsLength; i++) {\n    const currentSimplifiedPoint = simplifiedPoints[i];\n    const nextSimplifiedPoint = simplifiedPoints[i + 1] || currentSimplifiedPoint;\n    if (i === 0) {\n      simplifiedCommands.push({ type: 'M', x: currentSimplifiedPoint.x, y: currentSimplifiedPoint.y });\n    } else {\n      if (i === simplifiedPointsLength - 1) {\n        simplifiedCommands.push({ type: 'L', x: currentSimplifiedPoint.x, y: currentSimplifiedPoint.y });\n      } else {\n        simplifiedCommands.push({ type: 'Q', x1: currentSimplifiedPoint.x, y1: currentSimplifiedPoint.y, x: (currentSimplifiedPoint.x + nextSimplifiedPoint.x) / 2, y: (currentSimplifiedPoint.y + nextSimplifiedPoint.y) / 2 });\n      }\n    }\n  }\n  path.d = simplifiedCommands;\n  return path;\n}\n\nexport function elementToPathCommands(element: element): d {\n  function rectToCommands(rect: rect): d {\n    const x = rect.x;\n    const y = rect.y;\n    const width = rect.width;\n    const height = rect.height;\n    let rx = rect.rx || 0;\n    let ry = rect.ry || 0;\n\n    let commands: d = [];\n    if (rx === 0 && ry === 0) {\n      commands.push({ type: 'M', x: x, y: y });\n      commands.push({ type: 'H', x: x + width });\n      commands.push({ type: 'V', y: y + height });\n      commands.push({ type: 'H', x: x });\n      commands.push({ type: 'Z' });\n    } else {\n      commands.push({ type: 'M', x: x + rx, y: y });\n      commands.push({ type: 'H', x: x + width - rx });\n      commands.push({ type: 'A', rx: rx, ry: ry, xAxisRotation: 0, largeArcFlag: 0, sweepFlag: 1, x: x + width, y: y + ry });\n      commands.push({ type: 'V', y: y + height - ry });\n      commands.push({ type: 'A', rx: rx, ry: ry, xAxisRotation: 0, largeArcFlag: 0, sweepFlag: 1, x: x + width - rx, y: y + height });\n      commands.push({ type: 'H', x: x + rx });\n      commands.push({ type: 'A', rx: rx, ry: ry, xAxisRotation: 0, largeArcFlag: 0, sweepFlag: 1, x: x, y: y + height - ry });\n      commands.push({ type: 'V', y: y + ry });\n      commands.push({ type: 'A', rx: rx, ry: ry, xAxisRotation: 0, largeArcFlag: 0, sweepFlag: 1, x: x + rx, y: y });\n      commands.push({ type: 'Z' });\n    }\n    return commands;\n  }\n\n  function circleToCommands(circle: circle): d {\n    const cx = circle.cx;\n    const cy = circle.cy;\n    const r = circle.r;\n    let commands: d = [];\n    commands.push({ type: 'M', x: cx - r, y: cy });\n    commands.push({ type: 'A', rx: r, ry: r, xAxisRotation: 0, largeArcFlag: 1, sweepFlag: 0, x: cx + r, y: cy });\n    commands.push({ type: 'A', rx: r, ry: r, xAxisRotation: 0, largeArcFlag: 1, sweepFlag: 0, x: cx - r, y: cy });\n    commands.push({ type: 'Z' });\n    return commands;\n  }\n\n  function ellipseToCommands(ellipse: ellipse): d {\n    const cx = ellipse.cx;\n    const cy = ellipse.cy;\n    const rx = ellipse.rx;\n    const ry = ellipse.ry;\n    let commands: d = [];\n    commands.push({ type: 'M', x: cx - rx, y: cy });\n    commands.push({ type: 'A', rx: rx, ry: ry, xAxisRotation: 0, largeArcFlag: 1, sweepFlag: 0, x: cx + rx, y: cy });\n    commands.push({ type: 'A', rx: rx, ry: ry, xAxisRotation: 0, largeArcFlag: 1, sweepFlag: 0, x: cx - rx, y: cy });\n    commands.push({ type: 'Z' });\n    return commands;\n  }\n\n  function lineToCommands(line: line): d {\n    const x1 = line.x1;\n    const y1 = line.y1;\n    const x2 = line.x2;\n    const y2 = line.y2;\n    let commands: d = [];\n    commands.push({ type: 'M', x: x1, y: y1 });\n    commands.push({ type: 'L', x: x2, y: y2 });\n    return commands;\n  }\n\n  function polyToCommands(poly: polyline | polygon): d {\n    const points = poly.points;\n    let commands: d = [];\n    let index = 0;\n    for (const point of points) {\n      const x = point.x;\n      const y = point.y;\n      if (index === 0) {\n        commands.push({ type: 'M', x: x, y: y });\n      } else {\n        commands.push({ type: 'L', x: x, y: y });\n      }\n      index += 1;\n    }\n    if (poly.type === 'polygon') {\n      commands.push({ type: 'Z' });\n    }\n    return commands;\n  }\n\n  let commands = [];\n  switch (element.type) {\n    case 'rect':\n      commands = rectToCommands(element);\n      break;\n    case 'circle':\n      commands = circleToCommands(element);\n      break;\n    case 'ellipse':\n      commands = ellipseToCommands(element);\n      break;\n    case 'line':\n      commands = lineToCommands(element);\n      break;\n    case 'polyline':\n      commands = polyToCommands(element);\n      break;\n    case 'polygon':\n      commands = polyToCommands(element);\n      break;\n    case 'path':\n      commands = element.d;\n      break;\n    default:\n      throw new Error(`Unsupported element: ${element?.type}`);\n  }\n  return commands;\n}\n\nexport function buildPathFromElement(element: element): path {\n  const commands = elementToPathCommands(element);\n  return buildPath(commands, element?.fill, element?.stroke, element?.strokeWidth, element?.strokeDasharray, element?.strokeLinecap, element?.strokeLinejoin, element?.transform, element?.opacity, element?.visibility);\n}\n\nexport function getPathBoundingBox(path: path): boundingBox {\n  const points = samplePath(path, 1, true, true);\n  let pX = [];\n  let pY = [];\n  for (const point of points) {\n    pX.push(point.x);\n    pY.push(point.y);\n  }\n  const x0 = Math.min(...pX);\n  const y0 = Math.min(...pY);\n  const x1 = Math.max(...pX);\n  const y1 = Math.max(...pY);\n  return { x0, y0, x1, y1 };\n}\n\nexport function findPathIntersections(path1: path, path2: path): points {\n  const approxmiatePath1Points = samplePath(path1, 2, true, true);\n  const approxmiatePath2Points = samplePath(path2, 2, true, true);\n  const interval = 4;\n  let pointMap = {};\n  let candidatePoints = [];\n  for (const point1 of approxmiatePath1Points) {\n    const x = Math.floor(point1.x / interval);\n    const y = Math.floor(point1.y / interval);\n    if (!pointMap.hasOwnProperty(x)) {\n      pointMap[x] = {};\n    }\n    if (!pointMap[x].hasOwnProperty(y)) {\n      pointMap[x][y] = true;\n    }\n  }\n  for (const point2 of approxmiatePath2Points) {\n    const x = Math.floor(point2.x / interval);\n    const y = Math.floor(point2.y / interval);\n    if (!pointMap.hasOwnProperty(x)) {\n      pointMap[x] = {};\n    }\n    if (pointMap[x].hasOwnProperty(y)) {\n      candidatePoints.push({ x: x * interval, y: y * interval });\n    }\n  }\n  console.log(candidatePoints);\n  // TODO: check overlaps, further check\n}\n","import { points, fill, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\n\nexport interface polygon {\n  points: points;\n\n  fill?: fill;\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform; // Transformations applied to the polygon\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildPolygon(points: points, fill: fill, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): polygon {\n  return {\n    points: points || [],\n    fill: fill || 'none',\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'polygon'\n  };\n}\n","import { points, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\n\nexport interface polyline {\n  points: points;\n\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform; // Transformations applied to the polyline\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildPolyline(points: points, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): polyline {\n  return {\n    points: points || [],\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'polyline'\n  };\n}\n","import { x, y, width, height, rx, ry, fill, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType, boundingBox } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\n\nexport interface rect {\n  x: x;\n  y: y;\n  width: width;\n  height: height;\n  rx?: rx;\n  ry?: ry;\n\n  fill?: fill;\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform; // Transformations applied to the rectangle\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildRect(x: x, y: y, width: width, height: height, rx: rx, ry: ry, fill: fill, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): rect {\n  return {\n    x: x || 0,\n    y: y || 0,\n    width: width || 0,\n    height: height || 0,\n    rx: rx || 0,\n    ry: ry || 0,\n    fill: fill || 'none',\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'rect'\n  };\n}\n\nexport function getRectBoundingBox(element: rect): boundingBox {\n  const a = element.x;\n  const b = element.y;\n  const c = element.x + element.width;\n  const d = element.y + element.height;\n\n  const x0 = Math.min(a, c);\n  const y0 = Math.min(b, d);\n  const x1 = Math.max(a, c);\n  const y1 = Math.max(b, d);\n  return { x0, y0, x1, y1 };\n}\n","import { uuidv4 } from '../../utilities/index';\nimport { x, y, width, height, id } from '../attributes/index';\nimport { elements } from '../elements/index';\n\ntype root = boolean;\n\nexport interface plane {\n  x: x;\n  y: y;\n  width: width;\n  height: height;\n  root: root;\n  elements: elements;\n  subPlanes: Array<plane>;\n  id: id;\n  type: 'plane';\n}\n\nexport function buildPlane(x: x, y: y, width: width, height: height, root: root, elements: elements, subPlanes: Array<plane>): plane {\n  return {\n    x: root ? 0 : x || 0,\n    y: root ? 0 : y || 0,\n    width: width || 0,\n    height: height || 0,\n    root: root || false,\n    elements: elements || [],\n    subPlanes: subPlanes || [],\n    id: uuidv4(),\n    type: 'plane'\n  };\n}\n","import { plane } from '../plane/index';\n\nimport { rect } from '../elements/rect';\nimport { circle } from '../elements/circle';\nimport { ellipse } from '../elements/ellipse';\nimport { line } from '../elements/line';\nimport { polyline } from '../elements/polyline';\nimport { polygon } from '../elements/polygon';\n\nimport { createTransformationMatrix } from '../transformation/index';\nimport { points, transform } from '../attributes/index';\n\ninterface renderConfig {\n  flattenTransform: boolean;\n  exceptID: boolean;\n}\n\nexport function renderPlaneAsXML(plane: plane, config: renderConfig): string {\n  function renderElements(plane: plane, config: renderConfig): string {\n    var result = '';\n    function renderTransform(transform: transform, config: renderConfig): string {\n      if (config.flattenTransform) {\n        var transformationMatrix = createTransformationMatrix(transform);\n        var result = `matrix(${transformationMatrix[0][0]},${transformationMatrix[1][0]},${transformationMatrix[0][1]},${transformationMatrix[1][1]},${transformationMatrix[0][2]},${transformationMatrix[1][2]})`;\n        return result;\n      } else {\n        var result = [];\n        var transformLength: number = transform.length;\n        for (var i = 0; i < transformLength; i++) {\n          switch (transform[i]?.type) {\n            case 'translate':\n              result.push(`translate(${transform[i].x},${transform[i].y})`);\n              break;\n            case 'scale':\n              result.push(`scale(${transform[i].x},${transform[i].y})`);\n              break;\n            case 'rotate':\n              result.push(`rotate(${transform[i].deg})`);\n              break;\n            case 'skewX':\n              result.push(`skewX(${transform[i].deg})`);\n              break;\n            case 'skewY':\n              result.push(`skewY(${transform[i].deg})`);\n              break;\n            default:\n              break;\n          }\n        }\n        return result.join(' ');\n      }\n    }\n\n    function renderPoints(points: points, plane: plane): string {\n      return points.map((point) => `${point.x + plane.x},${point.y + plane.y}`).join(' ');\n    }\n\n    function renderD(d: d, plane: plane): string {\n      let result = [];\n      for (const command of d) {\n        switch (command?.type) {\n          case 'M':\n            result.push(`M ${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'L':\n            result.push(`L ${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'H':\n            result.push(`H ${command.x + plane.x}`);\n            break;\n          case 'V':\n            result.push(`V ${command.y + plane.y}`);\n            break;\n          case 'C':\n            result.push(`C ${command.x1 + plane.x} ${command.y1 + plane.y},${command.x2 + plane.x} ${command.y2 + plane.y},${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'S':\n            result.push(`S ${command.x2 + plane.x} ${command.y2 + plane.y},${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'Q':\n            result.push(`Q ${command.x1 + plane.x} ${command.y1 + plane.y} ${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'T':\n            result.push(`T ${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'A':\n            result.push(`A ${command.rx} ${command.ry} ${command.xAxisRotation} ${command.largeArcFlag} ${command.sweepFlag} ${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'Z':\n            result.push('Z');\n            break;\n          default:\n            break;\n        }\n      }\n      return result.join(' ');\n    }\n\n    function renderRect(rect: rect, plane: plane): string {\n      var rectWidth: number = Math.abs(rect.width);\n      var rectHeight: number = Math.abs(rect.height);\n      var rectX: number = rect.x;\n      var rectY: number = rect.y;\n      if (rect.width < 0) {\n        rectX -= rectWidth;\n      }\n      if (rect.height < 0) {\n        rectY -= rectHeight;\n      }\n      return `<rect x=\"${rectX + plane.x}\" y=\"${rectY + plane.y}\" width=\"${rectWidth}\" height=\"${rectHeight}\" rx=\"${rect.rx}\" ry=\"${rect.ry}\" fill=\"${rect.fill}\" stroke=\"${rect.stroke}\" stroke-width=\"${rect.strokeWidth}\" stroke-dasharray=\"${rect.strokeDasharray}\" stroke-linecap=\"${rect.strokeLinecap}\" stroke-linejoin=\"${rect.strokeLinejoin}\" transform=\"${renderTransform(rect.transform, config)}\" opacity=\"${rect.opacity}\" visibility=\"${rect.visibility}\" ${config.exceptID ? '' : ` id=\"${rect.id}\" `}/>`;\n    }\n\n    function renderCircle(circle: circle, plane: plane): string {\n      return `<circle cx=\"${circle.cx + plane.x}\" cy=\"${circle.cy + plane.y}\" r=\"${circle.r}\" fill=\"${circle.fill}\" stroke=\"${circle.stroke}\" stroke-width=\"${circle.strokeWidth}\" stroke-dasharray=\"${circle.strokeDasharray}\" stroke-linecap=\"${circle.strokeLinecap}\" stroke-linejoin=\"${circle.strokeLinejoin}\" transform=\"${renderTransform(circle.transform, config)}\" opacity=\"${circle.opacity}\" visibility=\"${circle.visibility}\" ${config.exceptID ? '' : ` id=\"${circle.id}\" `}/>`;\n    }\n\n    function renderEllipse(ellipse: ellipse, plane: plane): string {\n      return `<ellipse cx=\"${ellipse.cx + plane.x}\" cy=\"${ellipse.cy + plane.y}\" rx=\"${ellipse.rx}\" ry=\"${ellipse.ry}\" fill=\"${ellipse.fill}\" stroke=\"${ellipse.stroke}\" stroke-width=\"${ellipse.strokeWidth}\" stroke-dasharray=\"${ellipse.strokeDasharray}\" stroke-linecap=\"${ellipse.strokeLinecap}\" stroke-linejoin=\"${ellipse.strokeLinejoin}\" transform=\"${renderTransform(ellipse.transform, config)}\" opacity=\"${ellipse.opacity}\" visibility=\"${ellipse.visibility}\" ${config.exceptID ? '' : ` id=\"${ellipse.id}\" `}/>`;\n    }\n\n    function renderLine(line: line, plane: plane): string {\n      return `<line x1=\"${line.x1 + plane.x}\" y1=\"${line.y1 + plane.y}\" x2=\"${line.x2 + plane.x}\" y2=\"${line.y2 + plane.y}\" stroke=\"${line.stroke}\" stroke-width=\"${line.strokeWidth}\" stroke-dasharray=\"${line.strokeDasharray}\" stroke-linecap=\"${line.strokeLinecap}\" stroke-linejoin=\"${line.strokeLinejoin}\" transform=\"${renderTransform(line.transform, config)}\" opacity=\"${line.opacity}\" visibility=\"${line.visibility}\" ${config.exceptID ? '' : ` id=\"${line.id}\" `}/>`;\n    }\n\n    function renderPolyline(polyline: polyline, plane: plane): string {\n      return `<polyline points=\"${renderPoints(polyline.points, plane)}\" stroke=\"${polyline.stroke}\" stroke-width=\"${polyline.strokeWidth}\" stroke-dasharray=\"${polyline.strokeDasharray}\" stroke-linecap=\"${polyline.strokeLinecap}\" stroke-linejoin=\"${polyline.strokeLinejoin}\" transform=\"${renderTransform(polyline.transform, config)}\" opacity=\"${polyline.opacity}\" visibility=\"${polyline.visibility}\" ${config.exceptID ? '' : ` id=\"${polyline.id}\" `}/>`;\n    }\n\n    function renderPolygon(polygon: polygon, plane: plane): string {\n      return `<polygon points=\"${renderPoints(polygon.points, plane)}\" fill=\"${polygon.fill}\" stroke=\"${polygon.stroke}\" stroke-width=\"${polygon.strokeWidth}\" stroke-dasharray=\"${polygon.strokeDasharray}\" stroke-linecap=\"${polygon.strokeLinecap}\" stroke-linejoin=\"${polygon.strokeLinejoin}\" transform=\"${renderTransform(polygon.transform, config)}\" opacity=\"${polygon.opacity}\" visibility=\"${polygon.visibility}\" ${config.exceptID ? '' : ` id=\"${polygon.id}\" `}/>`;\n    }\n\n    function renderPath(path: path, plane: plane): string {\n      return `<path d=\"${renderD(path.d, plane)}\" fill=\"${path.fill}\" stroke=\"${path.stroke}\" stroke-width=\"${path.strokeWidth}\" stroke-dasharray=\"${path.strokeDasharray}\" stroke-linecap=\"${path.strokeLinecap}\" stroke-linejoin=\"${path.strokeLinejoin}\" transform=\"${renderTransform(path.transform, config)}\" opacity=\"${path.opacity}\" visibility=\"${path.visibility}\" ${config.exceptID ? '' : ` id=\"${path.id}\" `}/>`;\n    }\n\n    for (var element of plane.elements) {\n      switch (element?.type) {\n        case 'rect':\n          result += renderRect(element, plane);\n          break;\n        case 'circle':\n          result += renderCircle(element, plane);\n          break;\n        case 'ellipse':\n          result += renderEllipse(element, plane);\n          break;\n        case 'line':\n          result += renderLine(element, plane);\n          break;\n        case 'polyline':\n          result += renderPolyline(element, plane);\n          break;\n        case 'polygon':\n          result += renderPolygon(element, plane);\n          break;\n        case 'path':\n          result += renderPath(element, plane);\n          break;\n        default:\n          break;\n      }\n    }\n\n    for (var subPlane of plane.subPlanes) {\n      result += renderElements(subPlane, config);\n    }\n\n    return `<g${config.exceptID ? '' : ` id=\"${plane.id}\"`}>${result}</g>`;\n  }\n  return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${plane.width}\" height=\"${plane.height}\" viewBox=\"0 0 ${plane.width} ${plane.height}\">${renderElements(plane, config)}</svg>`;\n}\n","import { translate, scale, rotate, skewX, skewY, matrix, rad, transform, point, points } from '../attributes/index';\n\nexport function createTranslationMatrix(translate: translate): matrix {\n  return [\n    [1, 0, translate.x],\n    [0, 1, translate.y],\n    [0, 0, 1]\n  ];\n}\n\nexport function createScalingMatrix(scale: scale): matrix {\n  return [\n    [scale.x, 0, 0],\n    [0, scale.y, 0],\n    [0, 0, 1]\n  ];\n}\n\nexport function createRotationMatrix(rotate: rotate): matrix {\n  const rad: rad = (rotate.deg * Math.PI) / 180;\n  return [\n    [Math.cos(rad), -Math.sin(rad), 0],\n    [Math.sin(rad), Math.cos(rad), 0],\n    [0, 0, 1]\n  ];\n}\n\nexport function createSkewXMatrix(skewX: skewX): matrix {\n  const rad: rad = (skewX.deg * Math.PI) / 180;\n  return [\n    [1, Math.tan(rad), 0],\n    [0, 1, 0],\n    [0, 0, 1]\n  ];\n}\n\nexport function createSkewYMatrix(skewY: skewY): matrix {\n  const rad: rad = (skewY.deg * Math.PI) / 180;\n  return [\n    [1, 0, 0],\n    [Math.tan(rad), 1, 0],\n    [0, 0, 1]\n  ];\n}\n\nexport function multiplyMatrices(a: matrix, b: matrix): matrix {\n  var result: matrix = [\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0]\n  ];\n\n  for (var i = 0; i < 3; i++) {\n    for (var j = 0; j < 3; j++) {\n      for (var k = 0; k < 3; k++) {\n        result[i][j] += a[i][k] * b[k][j];\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function createTransformationMatrix(transform: transform): matrix {\n  var identityMatrix: matrix = [\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1]\n  ];\n  var transformLength = transform.length;\n\n  for (var i = 0; i < transformLength; i++) {\n    var transformationMatrix: matrix;\n    switch (transform[i]?.type) {\n      case 'translate':\n        transformationMatrix = createTranslationMatrix(transform[i]);\n        break;\n      case 'scale':\n        transformationMatrix = createScalingMatrix(transform[i]);\n        break;\n      case 'rotate':\n        transformationMatrix = createRotationMatrix(transform[i]);\n        break;\n      case 'skewX':\n        transformationMatrix = createSkewXMatrix(transform[i]);\n        break;\n      case 'skewY':\n        transformationMatrix = createSkewYMatrix(transform[i]);\n        break;\n      default:\n        transformationMatrix = [\n          [1, 0, 0],\n          [0, 1, 0],\n          [0, 0, 1]\n        ];\n        break;\n    }\n    identityMatrix = multiplyMatrices(transformationMatrix, identityMatrix);\n  }\n  return identityMatrix; // return a new \"identity\" matrix\n}\n\nexport function transformPoints(points: points, transform: transform): points {\n  function applyTransformationMatrix(matrix: matrix, point: point): point {\n    const [x, y, _] = [matrix[0][0] * point.x + matrix[0][1] * point.y + matrix[0][2], matrix[1][0] * point.x + matrix[1][1] * point.y + matrix[1][2], 1];\n    return { x, y };\n  }\n  const transformationMatrix = createTransformationMatrix(transform);\n  return points.map((point) => applyTransformationMatrix(transformationMatrix, point));\n}\n","import { createVectorDocument, openDocument, vectorDocument } from '../editor/index';\n\nconst newDocumentElement: HTMLElement = document.querySelector('.css_new_document');\nconst newDocumentModalOverlayElement: HTMLElement = document.querySelector('.css_new_document_modal_overlay');\n\nexport function openNewDocument(): void {\n  newDocumentElement.setAttribute('displayed', true);\n  newDocumentModalOverlayElement.setAttribute('displayed', true);\n}\n\nexport function closeNewDocument(): void {\n  newDocumentElement.setAttribute('displayed', false);\n  newDocumentModalOverlayElement.setAttribute('displayed', false);\n}\n\nexport function createDocumentWithInputs(): void {\n  const name: string = String(newDocumentElement.querySelector('#new_document_name').value) || 'Untitled';\n  const width: number = parseInt(newDocumentElement.querySelector('#new_document_width').value) || 64;\n  const height: number = parseInt(newDocumentElement.querySelector('#new_document_height').value) || 64;\n  var creation: vectorDocument = createVectorDocument(width, height, null, null, name);\n  openDocument(creation.id);\n}\n","let lazyCSS = {\n  noto_sans_tc: false,\n  material_symbols: false\n};\n\nexport function loadCSS(url: string, identifier: string): void {\n  if (lazyCSS[identifier] === false) {\n    const link = document.createElement('link');\n    link.setAttribute('href', url);\n    link.setAttribute('rel', 'stylesheet');\n    document.head.appendChild(link);\n    lazyCSS[identifier] = true;\n  }\n}\n","import { createTransformationMatrix, transformPoints } from './graphic/transformation/index';\nimport { buildRect } from './graphic/elements/rect';\nimport { buildCircle } from './graphic/elements/circle';\nimport { buildPlane } from './graphic/plane/index';\nimport { renderPlaneAsXML } from './graphic/render/index';\nimport { initializeTools, switchTool } from './editor/tools/index';\nimport { initializeEditor } from './editor/index';\nimport { openNewDocument, closeNewDocument, createDocumentWithInputs } from './new_document/index';\nimport { switchShapeType } from './editor/tools/shape';\nimport { loadCSS } from './utilities/lazy-css';\nimport { buildPathFromElement, findPathIntersections, samplePath } from './graphic/elements/path';\n\nimport './theme.css';\nimport './index.css';\nimport './icons.css';\n\nimport './home/index.css';\n\nimport './new_document/index.css';\n\nimport './editor/index.css';\nimport './editor/planes.css';\nimport './editor/tools/index.css';\nimport './editor/tools/shape.css';\n\nwindow.vector = {\n  test: {\n    createTransformationMatrix,\n    transformPoints,\n    r: function () {\n      var plane0 = buildPlane(0, 0, 300, 300, true);\n      var rect0 = buildRect(\n        10,\n        20,\n        50,\n        80,\n        10,\n        10,\n        '#000',\n        null,\n        null,\n        null,\n        null,\n        null,\n        [\n          { type: 'rotate', deg: 20 },\n          { type: 'translate', x: 90, y: 40 }\n        ],\n        1,\n        null\n      );\n      plane0.elements.push(rect0);\n      var plane1 = buildPlane(5, 5, 60, 60, false, null, null);\n      var rect1 = buildRect(5, 5, 50, 50, 5, 5, '#000');\n      var circle0 = buildCircle(0, 0, 20, 20, 20, '#000', null, null, null, null, null, [{ type: 'scale', x: 1.5, y: 1.2 }], 0.8, null);\n      plane1.elements.push(rect1);\n      plane1.elements.push(circle0);\n      plane0.subPlanes.push(plane1);\n      console.log(JSON.stringify(plane0));\n      console.log(\n        renderPlaneAsXML(plane0, {\n          flattenTransform: false,\n          exceptID: false\n        })\n      );\n      for (const element of plane1.elements.concat(plane0.elements)) {\n        try {\n          let p = buildPathFromElement(element);\n          console.log(element);\n          console.log(p);\n          let P = samplePath(p, 1, true);\n          console.log(P);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      console.log(findPathIntersections(buildPathFromElement(rect1), buildPathFromElement(circle0)))\n    }\n  },\n  toolbar: {\n    switchTool,\n    switchShapeType\n  },\n  documents: {\n    newDocument: {\n      openNewDocument,\n      closeNewDocument,\n      createDocumentWithInputs\n    }\n  },\n  initialize: function () {\n    initializeTools();\n    initializeEditor();\n    console.log(0);\n  },\n  secondlyInitialize: function () {\n    loadCSS('https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@100..900&display=swap', 'noto_sans_tc');\n    loadCSS('https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200', 'material_symbols');\n  }\n};\n\nexport default window.vector;\n","export const { v4: uuidv4 } = require('uuid');\n"],"names":["buildCircle","x","y","cx","cy","r","fill","stroke","strokeWidth","strokeDasharray","strokeLinecap","strokeLinejoin","transform","opacity","visibility","id","uuidv4","type","buildEllipse","rx","ry","buildLine","x1","y1","x2","y2","buildPath","d","samplePath","path","precision","arguments","length","undefined","flatten","detailedCurve","points","commands","interpolateLinear","p0","p1","segmentPoints","step","Math","hypot","i","t","push","interpolateCubicBezier","c1","c2","distance","round","pow","interpolateQuadraticBezier","c","interpolateArc","xAxisRotation","largeArcFlag","sweepFlag","rotationRad","PI","cosRot","cos","sinRot","sin","dx","dy","x1p","y1p","rxSq","rySq","x1pSq","y1pSq","radicant","max","coef","sqrt","cxp","cyp","theta1","atan2","deltaTheta","adjustedDeltaTheta","finalDeltaTheta","theta","_step","currentPoint","previousControlPoint","_iterator","_createForOfIteratorHelper","s","n","done","command","value","lineEnd","apply","_toConsumableArray","horizontalEnd","verticalEnd","cubicStart","cubicControl1","cubicControl2","cubicEnd","smoothStart","smoothControl1","smoothControl2","smoothEnd","quadStart","quadControl","quadEnd","smoothQuadStart","smoothQuadControl","smoothQuadEnd","Error","concat","err","e","f","samplePathCommands","_typeof","Array","isArray","transformPoints","smoothPath","simplifiedPoints","simplifyPoints","tolerance","distanceToSegment","point","start","end","closestPoint","dmax","index","leftPoints","slice","rightPoints","simplifiedLeft","simplifiedRight","simplifiedPointsLength","simplifiedCommands","currentSimplifiedPoint","nextSimplifiedPoint","elementToPathCommands","element","polyToCommands","poly","_step2","_iterator2","rect","width","height","rectToCommands","circle","circleToCommands","ellipse","ellipseToCommands","line","lineToCommands","buildPathFromElement","getPathBoundingBox","_step3","pX","pY","_iterator3","x0","min","y0","findPathIntersections","path1","path2","_step4","approxmiatePath1Points","approxmiatePath2Points","pointMap","candidatePoints","_iterator4","point1","floor","hasOwnProperty","_step5","_iterator5","point2","console","log","buildPolygon","buildPolyline","buildRect","buildPlane","root","elements","subPlanes","renderPlaneAsXML","plane","config","renderElements","result","renderTransform","flattenTransform","transformationMatrix","createTransformationMatrix","transformLength","_transform$i","deg","join","renderPoints","map","renderRect","rectWidth","abs","rectHeight","rectX","rectY","exceptID","renderCircle","renderEllipse","renderLine","renderPolyline","polyline","renderPolygon","polygon","renderPath","renderD","_element","createSkewXMatrix","skewX","rad","tan","createSkewYMatrix","skewY","multiplyMatrices","a","b","j","k","rotate","scale","translate","identityMatrix","matrix","applyTransformationMatrix","newDocumentElement","document","querySelector","newDocumentModalOverlayElement","lazyCSS","noto_sans_tc","material_symbols","loadCSS","url","identifier","link","createElement","setAttribute","head","appendChild","window","vector","test","plane0","rect0","plane1","rect1","circle0","JSON","stringify","p","P","toolbar","switchTool","switchShapeType","documents","newDocument","openNewDocument","closeNewDocument","createDocumentWithInputs","name","String","parseInt","creation","createVectorDocument","openDocument","initialize","initializeTools","initializeEditor","secondlyInitialize","require","v4"],"sourceRoot":""}