{"version":3,"file":"6c2de0f126372c2c7430.min.js","mappings":"4HAwBO,SAASA,EAAYC,EAAMC,EAAMC,EAAQC,EAAQC,EAAMC,EAAYC,EAAgBC,EAA0BC,EAAkCC,EAA8BC,EAAgCC,EAAsBC,EAAkBC,GAC1P,MAAO,CACLb,EAAGA,GAAK,EACRC,EAAGA,GAAK,EACRC,GAAIA,GAAM,EACVC,GAAIA,GAAM,EACVC,EAAGA,GAAK,EACRC,KAAMA,GAAQ,OACdC,OAAQA,GAAU,OAClBC,YAAaA,GAAe,EAC5BC,gBAAiBA,GAAmB,GACpCC,cAAeA,GAAiB,OAChCC,eAAgBA,GAAkB,QAClCC,UAAWA,GAAa,GACxBC,QAASA,GAAW,EACpBC,WAAYA,GAAc,UAC1BC,IAAIC,EAAAA,EAAAA,KACJC,KAAM,SAEV,C,8CClBO,SAASC,EAAajB,EAAMC,EAAMC,EAAQC,EAAQe,EAAQC,EAAQd,EAAYC,EAAgBC,EAA0BC,EAAkCC,EAA8BC,EAAgCC,EAAsBC,EAAkBC,GACrQ,MAAO,CACLb,EAAGA,GAAK,EACRC,EAAGA,GAAK,EACRC,GAAIA,GAAM,EACVC,GAAIA,GAAM,EACVe,GAAIA,GAAM,EACVC,GAAIA,GAAM,EACVd,KAAMA,GAAQ,OACdC,OAAQA,GAAU,OAClBC,YAAaA,GAAe,EAC5BC,gBAAiBA,GAAmB,GACpCC,cAAeA,GAAiB,OAChCC,eAAgBA,GAAkB,QAClCC,UAAWA,GAAa,GACxBC,QAASA,GAAW,EACpBC,WAAYA,GAAc,UAC1BC,IAAIC,EAAAA,EAAAA,KACJC,KAAM,UAEV,C,6CCvBO,SAASI,EAAUC,EAAOC,EAAOC,EAAOC,EAAOlB,EAAgBC,EAA0BC,EAAkCC,EAA8BC,EAAgCC,EAAsBC,EAAkBC,GACtO,MAAO,CACLQ,GAAIA,GAAM,EACVC,GAAIA,GAAM,EACVC,GAAIA,GAAM,EACVC,GAAIA,GAAM,EACVlB,OAAQA,GAAU,OAClBC,YAAaA,GAAe,EAC5BC,gBAAiBA,GAAmB,GACpCC,cAAeA,GAAiB,OAChCC,eAAgBA,GAAkB,QAClCC,UAAWA,GAAa,GACxBC,QAASA,GAAW,EACpBC,WAAYA,GAAc,UAC1BC,IAAIC,EAAAA,EAAAA,KACJC,KAAM,OAEV,C,4pDCXO,SAASS,EAAUC,EAAMrB,EAAYC,EAAgBC,EAA0BC,EAAkCC,EAA8BC,EAAgCC,EAAsBC,EAAkBC,GAC5N,MAAO,CACLa,EAAGA,GAAK,GACRrB,KAAMA,GAAQ,OACdC,OAAQA,GAAU,OAClBC,YAAaA,GAAe,EAC5BC,gBAAiBA,GAAmB,GACpCC,cAAeA,GAAiB,OAChCC,eAAgBA,GAAkB,QAClCC,UAAWA,GAAa,GACxBC,QAASA,GAAW,EACpBC,WAAYA,GAAc,UAC1BC,IAAIC,EAAAA,EAAAA,KACJC,KAAM,OAEV,CAEO,SAASW,EAAWC,GAAqE,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAzDC,EAAiBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAGG,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAExEI,EAAiB,GAErB,SAASC,EAAkBC,EAAWC,EAAWR,GAI/C,IAHA,IAAIS,EAAwB,GAEtBC,EADWC,KAAKC,MAAMJ,EAAG7C,EAAI4C,EAAG5C,EAAG6C,EAAG5C,EAAI2C,EAAG3C,GAC3BoC,EACfa,EAAI,EAAGA,EAAIH,EAAMG,IAAK,CAC7B,IAAMC,EAAIH,KAAKI,IAAIJ,KAAKK,IAAIH,EAAIH,EAAM,GAAI,GACpC/C,EAAI4C,EAAG5C,GAAK6C,EAAG7C,EAAI4C,EAAG5C,GAAKmD,EAC3BlD,EAAI2C,EAAG3C,GAAK4C,EAAG5C,EAAI2C,EAAG3C,GAAKkD,EACjCL,EAAcQ,KAAK,CAAEtD,EAAAA,EAAGC,EAAAA,GAC1B,CACA,OAAO6C,CACT,CAEA,SAASS,EAAuBX,EAAWY,EAAWC,EAAWZ,EAAWR,GAI1E,IAHA,IAAIS,EAAwB,GAEtBC,EADWC,KAAKC,MAAMJ,EAAG7C,EAAI4C,EAAG5C,EAAG6C,EAAG5C,EAAI2C,EAAG3C,GAC3BoC,EACfa,EAAI,EAAGA,EAAIH,EAAMG,IAAK,CAC7B,IAAMC,EAAIH,KAAKI,IAAIJ,KAAKK,IAAIH,EAAIH,EAAM,GAAI,GACpC/C,EAAIgD,KAAKU,IAAI,EAAIP,EAAG,GAAKP,EAAG5C,EAAI,EAAIgD,KAAKU,IAAI,EAAIP,EAAG,GAAKA,EAAIK,EAAGxD,EAAI,GAAK,EAAImD,GAAKH,KAAKU,IAAIP,EAAG,GAAKM,EAAGzD,EAAIgD,KAAKU,IAAIP,EAAG,GAAKN,EAAG7C,EAC9HC,EAAI+C,KAAKU,IAAI,EAAIP,EAAG,GAAKP,EAAG3C,EAAI,EAAI+C,KAAKU,IAAI,EAAIP,EAAG,GAAKA,EAAIK,EAAGvD,EAAI,GAAK,EAAIkD,GAAKH,KAAKU,IAAIP,EAAG,GAAKM,EAAGxD,EAAI+C,KAAKU,IAAIP,EAAG,GAAKN,EAAG5C,EACpI6C,EAAcQ,KAAK,CAAEtD,EAAAA,EAAGC,EAAAA,GAC1B,CACA,OAAO6C,CACT,CAEA,SAASa,EAA2Bf,EAAWgB,EAAUf,EAAWR,GAIlE,IAHA,IAAIS,EAAwB,GAEtBC,EADWC,KAAKC,MAAMJ,EAAG7C,EAAI4C,EAAG5C,EAAG6C,EAAG5C,EAAI2C,EAAG3C,GAC3BoC,EACfa,EAAI,EAAGA,EAAIH,EAAMG,IAAK,CAC7B,IAAMC,EAAIH,KAAKI,IAAIJ,KAAKK,IAAIH,EAAIH,EAAM,GAAI,GACpC/C,EAAIgD,KAAKU,IAAI,EAAIP,EAAG,GAAKP,EAAG5C,EAAI,GAAK,EAAImD,GAAKA,EAAIN,EAAG7C,EAAIgD,KAAKU,IAAIP,EAAG,GAAKS,EAAE5D,EAC5EC,EAAI+C,KAAKU,IAAI,EAAIP,EAAG,GAAKP,EAAG3C,EAAI,GAAK,EAAIkD,GAAKA,EAAIN,EAAG5C,EAAI+C,KAAKU,IAAIP,EAAG,GAAKS,EAAE3D,EAClF6C,EAAcQ,KAAK,CAAEtD,EAAAA,EAAGC,GAC1B,CACA,OAAO6C,CACT,CAEA,SAASe,EAAejB,EAAW1B,EAAYC,EAAY2C,EAAuBC,EAAqBC,EAAkBhE,EAAWC,EAAWoC,GAC7I,IAAM4B,EAAWjB,KAAKC,MAAMjD,EAAI4C,EAAG5C,EAAGC,EAAI2C,EAAG3C,GACvC8C,EAAOC,KAAKkB,MAAMD,EAAW5B,GAM7B8B,EAAuBL,EAHId,KAAKoB,GAAM,IAItCC,EAASrB,KAAKsB,IAAIH,GAClBI,EAASvB,KAAKwB,IAAIL,GAGlBM,GAAM7B,EAAG5C,EAAIA,GAAK,EAClB0E,GAAM9B,EAAG3C,EAAIA,GAAK,EAGlB0E,EAAMN,EAASI,EAAKF,EAASG,EAC7BE,GAAOL,EAASE,EAAKJ,EAASK,EAG9BG,EAAI7B,KAAAU,IAAGxC,EAAM,GACb4D,EAAI9B,KAAAU,IAAGvC,EAAM,GACb4D,EAAK/B,KAAAU,IAAGiB,EAAO,GACfK,EAAKhC,KAAAU,IAAGkB,EAAO,GAEjBK,GAAYJ,EAAOC,EAAOD,EAAOG,EAAQF,EAAOC,IAAUF,EAAOG,EAAQF,EAAOC,GACpFE,EAAWjC,KAAKK,IAAI,EAAG4B,GAoBvB,IAnBA,IAAMC,GAAQnB,IAAiBC,EAAY,GAAK,GAAKhB,KAAKmC,KAAKF,GAEzDG,EAAMF,GAAShE,EAAK0D,EAAOzD,GAC3BkE,EAAMH,IAAU/D,EAAKwD,EAAOzD,GAG5BhB,EAAKmE,EAASe,EAAMb,EAASc,GAAOzC,EAAG5C,EAAIA,GAAK,EAChDG,EAAKoE,EAASa,EAAMf,EAASgB,GAAOzC,EAAG3C,EAAIA,GAAK,EAGhDqF,EAAStC,KAAKuC,OAAOX,EAAMS,GAAOlE,GAAKwD,EAAMS,GAAOlE,GACpDsE,EAAaxC,KAAKuC,QAAQX,EAAMS,GAAOlE,IAAMwD,EAAMS,GAAOlE,GAAMoE,EAGhEG,EAAmC,IAAdzB,GAAmBwB,EAAa,EAAIA,EAAa,EAAIxC,KAAKoB,GAAKoB,EACpFE,EAAgC,IAAd1B,GAAmBwB,EAAa,EAAIA,EAAa,EAAIxC,KAAKoB,GAAKqB,EAGjF3C,EAAgB,GACbI,EAAI,EAAGA,EAAIH,EAAMG,IAAK,CAC7B,IACMyC,EAAQL,EADJpC,EAAIH,EACa2C,EAGrB1F,EAAIqE,GAAUnD,EAAK8B,KAAKsB,IAAIqB,IAAUpB,GAAUpD,EAAK6B,KAAKwB,IAAImB,IAAUzF,EACxED,EAAIsE,GAAUrD,EAAK8B,KAAKsB,IAAIqB,IAAUtB,GAAUlD,EAAK6B,KAAKwB,IAAImB,IAAUxF,EAE9E2C,EAAcQ,KAAK,CAAEtD,EAAAA,EAAGC,EAAAA,GAC1B,CACA,OAAO6C,CACT,CAEA,IAG8B8C,EAH1BC,EAAsB,CAAE7F,EAAG,EAAGC,EAAG,GACjC6F,EAAqC,KAAKC,EAAAC,EAvG7BpE,EAAKF,GAyGQ,IAA9B,IAAAqE,EAAAE,MAAAL,EAAAG,EAAAG,KAAAC,MAAgC,KAArBC,EAAOR,EAAAS,MAChB,OAAQD,EAAQpF,MACd,IAAK,IACH6E,EAAe,CAAE7F,EAAGoG,EAAQpG,EAAGC,EAAGmG,EAAQnG,GAC1CyC,EAAOY,KAAKuC,GACZC,EAAuB,KACvB,MACF,IAAK,IACH,IAAMQ,EAAU,CAAEtG,EAAGoG,EAAQpG,EAAGC,EAAGmG,EAAQnG,IAC3C4B,EAAAa,GAAOY,KAAIiD,MAAA1E,EAAA2E,EAAI7D,EAAkBkD,EAAcS,EAASjE,KACxDwD,EAAeS,EACfR,EAAuB,KACvB,MACF,IAAK,IACH,IAAMW,EAAgB,CAAEzG,EAAGoG,EAAQpG,EAAGC,EAAG4F,EAAa5F,IACtD6B,EAAAY,GAAOY,KAAIiD,MAAAzE,EAAA0E,EAAI7D,EAAkBkD,EAAcY,EAAepE,KAC9DwD,EAAeY,EACfX,EAAuB,KACvB,MACF,IAAK,IACH,IAAMY,EAAc,CAAE1G,EAAG6F,EAAa7F,EAAGC,EAAGmG,EAAQnG,IACpD8B,EAAAW,GAAOY,KAAIiD,MAAAxE,EAAAyE,EAAI7D,EAAkBkD,EAAca,EAAarE,KAC5DwD,EAAea,EACfZ,EAAuB,KACvB,MACF,IAAK,IACH,IAAMa,EAAad,EACbe,EAAgB,CAAE5G,EAAGoG,EAAQ/E,GAAIpB,EAAGmG,EAAQ9E,IAC5CuF,EAAgB,CAAE7G,EAAGoG,EAAQ7E,GAAItB,EAAGmG,EAAQ5E,IAC5CsF,EAAW,CAAE9G,EAAGoG,EAAQpG,EAAGC,EAAGmG,EAAQnG,IAC5C+B,EAAAU,GAAOY,KAAIiD,MAAAvE,EAAAwE,EAAIjD,EAAuBoD,EAAYC,EAAeC,EAAeC,EAAUzE,KAC1FwD,EAAeiB,EACfhB,EAAuBe,EACvB,MACF,IAAK,IACH,IAAME,EAAclB,EACdmB,EAAiBlB,EAAuB,CAAE9F,EAAG,EAAI+G,EAAY/G,EAAI8F,EAAqB9F,EAAGC,EAAG,EAAI8G,EAAY9G,EAAI6F,EAAqB7F,GAAM8G,EAC3IE,EAAiB,CAAEjH,EAAGoG,EAAQ7E,GAAItB,EAAGmG,EAAQ5E,IAC7C0F,EAAY,CAAElH,EAAGoG,EAAQpG,EAAGC,EAAGmG,EAAQnG,IAC7CgC,EAAAS,GAAOY,KAAIiD,MAAAtE,EAAAuE,EAAIjD,EAAuBwD,EAAaC,EAAgBC,EAAgBC,EAAW7E,KAC9FwD,EAAeqB,EACfpB,EAAuBmB,EACvB,MACF,IAAK,IACH,IAAME,EAAYtB,EACZuB,EAAc,CAAEpH,EAAGoG,EAAQpG,EAAGC,EAAGmG,EAAQnG,GACzCoH,EAAU,CAAErH,EAAGoG,EAAQ/E,GAAIpB,EAAGmG,EAAQ9E,KAC5CY,EAAAQ,GAAOY,KAAIiD,MAAArE,EAAAsE,EAAI7C,EAA2BwD,EAAWC,EAAaC,EAAShF,KAC3EwD,EAAewB,EACfvB,EAAuBsB,EACvB,MACF,IAAK,IACH,IAAME,EAAkBzB,EAClB0B,EAAoBzB,EAAuB,CAAE9F,EAAG,EAAIsH,EAAgBtH,EAAI8F,EAAqB9F,EAAGC,EAAG,EAAIqH,EAAgBrH,EAAI6F,EAAqB7F,GAAMqH,EACtJE,EAAgB,CAAExH,EAAGoG,EAAQpG,EAAGC,EAAGmG,EAAQnG,IACjDkC,EAAAO,GAAOY,KAAIiD,MAAApE,EAAAqE,EAAI7C,EAA2B2D,EAAiBC,EAAmBC,EAAenF,KAC7FwD,EAAe2B,EACf1B,EAAuByB,EACvB,MACF,IAAK,KACHnF,EAAAM,GAAOY,KAAIiD,MAAAnE,EAAAoE,EAAI3C,EAAegC,EAAcO,EAAQlF,GAAIkF,EAAQjF,GAAIiF,EAAQtC,cAAesC,EAAQrC,aAAcqC,EAAQpC,UAAWoC,EAAQpG,EAAGoG,EAAQnG,EAAGoC,KAC1JwD,EAAe,CAAE7F,EAAGoG,EAAQpG,EAAGC,EAAGmG,EAAQnG,GAC1C6F,EAAuB,KACvB,MACF,IAAK,IACCpD,EAAOH,OAAS,GAClBG,EAAOY,KAAKZ,EAAO,IAErBoD,EAAuB,KACvB,MACF,QACE,MAAM,IAAI2B,MAAM,6BAADC,OAA8BtB,EAAQpF,OAE3D,CAAC,OAAA2G,GAAA5B,EAAA6B,EAAAD,EAAA,SAAA5B,EAAA8B,GAAA,CAQD,OAPIpF,GAC4B,WAA1BqF,EAAOlG,EAAKjB,YAA0BoH,MAAMC,QAAQpG,EAAKjB,YACvDiB,EAAKjB,UAAU4B,OAAS,IAC1BG,GAASuF,EAAAA,EAAAA,IAAgBvF,EAAQd,EAAKjB,YAIrC+B,CACT,CAEO,SAASwF,EAAWtG,GAwDzB,IALA,IACMuG,EAnDN,SAASC,EAAe1F,EAAgB2F,GACtC,SAASC,EAAkBC,EAAcC,EAAcC,GACrD,IAAIhE,EAAKgE,EAAIzI,EAAIwI,EAAMxI,EACnB0E,EAAK+D,EAAIxI,EAAIuI,EAAMvI,EACnByB,EAAI+C,EAAKA,EAAKC,EAAKA,EACnBvB,IAAMoF,EAAMvI,EAAIwI,EAAMxI,GAAKyE,GAAM8D,EAAMtI,EAAIuI,EAAMvI,GAAKyE,GAAMhD,EAEhE,GAAIyB,EAAI,EACNsB,EAAK8D,EAAMvI,EAAIwI,EAAMxI,EACrB0E,EAAK6D,EAAMtI,EAAIuI,EAAMvI,OAChB,GAAIkD,EAAI,EACbsB,EAAK8D,EAAMvI,EAAIyI,EAAIzI,EACnB0E,EAAK6D,EAAMtI,EAAIwI,EAAIxI,MACd,CACL,IAAIyI,EAAe,CAAE1I,EAAGwI,EAAMxI,EAAImD,EAAIsB,EAAIxE,EAAGuI,EAAMvI,EAAIkD,EAAIuB,GAC3DD,EAAK8D,EAAMvI,EAAI0I,EAAa1I,EAC5B0E,EAAK6D,EAAMtI,EAAIyI,EAAazI,CAC9B,CAEA,OAAO+C,KAAKmC,KAAKV,EAAKA,EAAKC,EAAKA,EAClC,CAEA,GAAIhC,EAAOH,OAAS,EAClB,OAAOG,EAOT,IAJA,IAAIiG,EAAO,EACPC,EAAQ,EAGH1F,EAAI,EAAGA,EAAIR,EAAOH,OAAS,EAAGW,IAAK,CAC1C,IAAIxB,EAAI4G,EAAkB5F,EAAOQ,GAAIR,EAAO,GAAIA,EAAOA,EAAOH,OAAS,IACnEb,EAAIiH,IACNC,EAAQ1F,EACRyF,EAAOjH,EAEX,CAGA,GAAIiH,EAAON,EAAW,CACpB,IAAIQ,EAAanG,EAAOoG,MAAM,EAAGF,EAAQ,GACrCG,EAAcrG,EAAOoG,MAAMF,GAC3BI,EAAiBZ,EAAeS,EAAYR,GAC5CY,EAAkBb,EAAeW,EAAaV,GAClD,OAAOW,EAAeF,MAAM,EAAGE,EAAezG,OAAS,GAAGmF,OAAOuB,EACnE,CACE,MAAO,CAACvG,EAAO,GAAIA,EAAOA,EAAOH,OAAS,GAE9C,CAGyB6F,CADVzG,EAAWC,EAAM,GACgB,GAC1CsH,EAAyBf,EAAiB5F,OAC5C4G,EAAqB,GAEhBjG,EAAI,EAAGA,EAAIgG,EAAwBhG,IAAK,CAC/C,IAAMkG,EAAyBjB,EAAiBjF,GAC1CmG,EAAsBlB,EAAiBjF,EAAI,IAAMkG,EAC7C,IAANlG,EACFiG,EAAmB7F,KAAK,CAAEtC,KAAM,IAAKhB,EAAGoJ,EAAuBpJ,EAAGC,EAAGmJ,EAAuBnJ,IAExFiD,IAAMgG,EAAyB,EACjCC,EAAmB7F,KAAK,CAAEtC,KAAM,IAAKhB,EAAGoJ,EAAuBpJ,EAAGC,EAAGmJ,EAAuBnJ,IAE5FkJ,EAAmB7F,KAAK,CAAEtC,KAAM,IAAKK,GAAI+H,EAAuBpJ,EAAGsB,GAAI8H,EAAuBnJ,EAAGD,GAAIoJ,EAAuBpJ,EAAIqJ,EAAoBrJ,GAAK,EAAGC,GAAImJ,EAAuBnJ,EAAIoJ,EAAoBpJ,GAAK,GAG1N,CAEA,OADA2B,EAAKF,EAAIyH,EACFvH,CACT,CAEO,SAAS0H,EAAqBC,GAmEnC,SAASC,EAAeD,GACtB,IAG0BE,EAFtBC,EAAc,GACdd,EAAQ,EAAEe,EAAA3D,EAFCuD,EAAQ7G,QAGG,IAA1B,IAAAiH,EAAA1D,MAAAwD,EAAAE,EAAAzD,KAAAC,MAA4B,KAAjBoC,EAAKkB,EAAApD,MACRrG,EAAIuI,EAAMvI,EACVC,EAAIsI,EAAMtI,EACF,IAAV2I,EACFc,EAASpG,KAAK,CAAEtC,KAAM,IAAKhB,EAAGA,EAAGC,EAAGA,IAEpCyJ,EAASpG,KAAK,CAAEtC,KAAM,IAAKhB,EAAGA,EAAGC,EAAGA,IAEtC2I,GAAS,CACX,CAAC,OAAAjB,GAAAgC,EAAA/B,EAAAD,EAAA,SAAAgC,EAAA9B,GAAA,CAID,MAHqB,YAAjB0B,EAAQvI,MACV0I,EAASpG,KAAK,CAAEtC,KAAM,MAEjB0I,CACT,CACA,IAAIA,EAAW,GACf,OAAQH,EAAQvI,MACd,IAAK,OACH0I,EAxFJ,SAAwBH,GACtB,IAAMvJ,EAAIuJ,EAAQvJ,EACZC,EAAIsJ,EAAQtJ,EACZ2J,EAAQL,EAAQK,MAChBC,EAASN,EAAQM,OACnB3I,EAAKqI,EAAQrI,IAAM,EACnBC,EAAKoI,EAAQpI,IAAM,EAEnBuI,EAAc,GAmBlB,OAlBW,IAAPxI,GAAmB,IAAPC,GACduI,EAASpG,KAAK,CAAEtC,KAAM,IAAKhB,EAAGA,EAAGC,EAAGA,IACpCyJ,EAASpG,KAAK,CAAEtC,KAAM,IAAKhB,EAAGA,EAAI4J,IAClCF,EAASpG,KAAK,CAAEtC,KAAM,IAAKf,EAAGA,EAAI4J,IAClCH,EAASpG,KAAK,CAAEtC,KAAM,IAAKhB,EAAGA,IAC9B0J,EAASpG,KAAK,CAAEtC,KAAM,QAEtB0I,EAASpG,KAAK,CAAEtC,KAAM,IAAKhB,EAAGA,EAAIkB,EAAIjB,EAAGA,IACzCyJ,EAASpG,KAAK,CAAEtC,KAAM,IAAKhB,EAAGA,EAAI4J,EAAQ1I,IAC1CwI,EAASpG,KAAK,CAAEtC,KAAM,IAAKE,GAAIA,EAAIC,GAAIA,EAAI2C,cAAe,EAAGC,aAAc,EAAGC,UAAW,EAAGhE,EAAGA,EAAI4J,EAAO3J,EAAGA,EAAIkB,IACjHuI,EAASpG,KAAK,CAAEtC,KAAM,IAAKf,EAAGA,EAAI4J,EAAS1I,IAC3CuI,EAASpG,KAAK,CAAEtC,KAAM,IAAKE,GAAIA,EAAIC,GAAIA,EAAI2C,cAAe,EAAGC,aAAc,EAAGC,UAAW,EAAGhE,EAAGA,EAAI4J,EAAQ1I,EAAIjB,EAAGA,EAAI4J,IACtHH,EAASpG,KAAK,CAAEtC,KAAM,IAAKhB,EAAGA,EAAIkB,IAClCwI,EAASpG,KAAK,CAAEtC,KAAM,IAAKE,GAAIA,EAAIC,GAAIA,EAAI2C,cAAe,EAAGC,aAAc,EAAGC,UAAW,EAAGhE,EAAGA,EAAGC,EAAGA,EAAI4J,EAAS1I,IAClHuI,EAASpG,KAAK,CAAEtC,KAAM,IAAKf,EAAGA,EAAIkB,IAClCuI,EAASpG,KAAK,CAAEtC,KAAM,IAAKE,GAAIA,EAAIC,GAAIA,EAAI2C,cAAe,EAAGC,aAAc,EAAGC,UAAW,EAAGhE,EAAGA,EAAIkB,EAAIjB,EAAGA,IAC1GyJ,EAASpG,KAAK,CAAEtC,KAAM,OAEjB0I,CACT,CA4DeI,CAAeP,GAC1B,MACF,IAAK,SACHG,EA7DJ,SAA0BH,GACxB,IAAMrJ,EAAKqJ,EAAQrJ,GACbC,EAAKoJ,EAAQpJ,GACbC,EAAImJ,EAAQnJ,EACdsJ,EAAc,GAKlB,OAJAA,EAASpG,KAAK,CAAEtC,KAAM,IAAKhB,EAAGE,EAAKE,EAAGH,EAAGE,IACzCuJ,EAASpG,KAAK,CAAEtC,KAAM,IAAKE,GAAId,EAAGe,GAAIf,EAAG0D,cAAe,EAAGC,aAAc,EAAGC,UAAW,EAAGhE,EAAGE,EAAKE,EAAGH,EAAGE,IACxGuJ,EAASpG,KAAK,CAAEtC,KAAM,IAAKE,GAAId,EAAGe,GAAIf,EAAG0D,cAAe,EAAGC,aAAc,EAAGC,UAAW,EAAGhE,EAAGE,EAAKE,EAAGH,EAAGE,IACxGuJ,EAASpG,KAAK,CAAEtC,KAAM,MACf0I,CACT,CAmDeK,CAAiBR,GAC5B,MACF,IAAK,UACHG,EApDJ,SAA2BH,GACzB,IAAMrJ,EAAKqJ,EAAQrJ,GACbC,EAAKoJ,EAAQpJ,GACbe,EAAKqI,EAAQrI,GACbC,EAAKoI,EAAQpI,GACfuI,EAAc,GAKlB,OAJAA,EAASpG,KAAK,CAAEtC,KAAM,IAAKhB,EAAGE,EAAKgB,EAAIjB,EAAGE,IAC1CuJ,EAASpG,KAAK,CAAEtC,KAAM,IAAKE,GAAIA,EAAIC,GAAIA,EAAI2C,cAAe,EAAGC,aAAc,EAAGC,UAAW,EAAGhE,EAAGE,EAAKgB,EAAIjB,EAAGE,IAC3GuJ,EAASpG,KAAK,CAAEtC,KAAM,IAAKE,GAAIA,EAAIC,GAAIA,EAAI2C,cAAe,EAAGC,aAAc,EAAGC,UAAW,EAAGhE,EAAGE,EAAKgB,EAAIjB,EAAGE,IAC3GuJ,EAASpG,KAAK,CAAEtC,KAAM,MACf0I,CACT,CAyCeM,CAAkBT,GAC7B,MACF,IAAK,OACHG,EA1CJ,SAAwBH,GACtB,IAAMlI,EAAKkI,EAAQlI,GACbC,EAAKiI,EAAQjI,GACbC,EAAKgI,EAAQhI,GACbC,EAAK+H,EAAQ/H,GACfkI,EAAc,GAGlB,OAFAA,EAASpG,KAAK,CAAEtC,KAAM,IAAKhB,EAAGqB,EAAIpB,EAAGqB,IACrCoI,EAASpG,KAAK,CAAEtC,KAAM,IAAKhB,EAAGuB,EAAItB,EAAGuB,IAC9BkI,CACT,CAiCeO,CAAeV,GAC1B,MACF,IAAK,WAGL,IAAK,UACHG,EAAWF,EAAeD,GAC1B,MACF,IAAK,OACHG,EAAWH,EAAQ7H,EACnB,MACF,QACE,MAAM,IAAI+F,MAAM,wBAADC,OAAyB6B,aAAO,EAAPA,EAASvI,OAErD,OAAOS,EAAUiI,EAAUH,aAAO,EAAPA,EAASlJ,KAAMkJ,aAAO,EAAPA,EAASjJ,OAAQiJ,aAAO,EAAPA,EAAShJ,YAAagJ,aAAO,EAAPA,EAAS/I,gBAAiB+I,aAAO,EAAPA,EAAS9I,cAAe8I,aAAO,EAAPA,EAAS7I,eAAgB6I,aAAO,EAAPA,EAAS5I,UAAW4I,aAAO,EAAPA,EAAS3I,QAAS2I,aAAO,EAAPA,EAAS1I,WAC7M,C,8CCjZO,SAASqJ,EAAaxH,EAAgBrC,EAAYC,EAAgBC,EAA0BC,EAAkCC,EAA8BC,EAAgCC,EAAsBC,EAAkBC,GACzO,MAAO,CACL6B,OAAQA,GAAU,GAClBrC,KAAMA,GAAQ,OACdC,OAAQA,GAAU,OAClBC,YAAaA,GAAe,EAC5BC,gBAAiBA,GAAmB,GACpCC,cAAeA,GAAiB,OAChCC,eAAgBA,GAAkB,QAClCC,UAAWA,GAAa,GACxBC,QAASA,GAAW,EACpBC,WAAYA,GAAc,UAC1BC,IAAIC,EAAAA,EAAAA,KACJC,KAAM,UAEV,C,8CChBO,SAASmJ,EAAczH,EAAgBpC,EAAgBC,EAA0BC,EAAkCC,EAA8BC,EAAgCC,EAAsBC,EAAkBC,GAC9N,MAAO,CACL6B,OAAQA,GAAU,GAClBpC,OAAQA,GAAU,OAClBC,YAAaA,GAAe,EAC5BC,gBAAiBA,GAAmB,GACpCC,cAAeA,GAAiB,OAChCC,eAAgBA,GAAkB,QAClCC,UAAWA,GAAa,GACxBC,QAASA,GAAW,EACpBC,WAAYA,GAAc,UAC1BC,IAAIC,EAAAA,EAAAA,KACJC,KAAM,WAEV,C,8CCRO,SAASoJ,EAAUpK,EAAMC,EAAM2J,EAAcC,EAAgB3I,EAAQC,EAAQd,EAAYC,EAAgBC,EAA0BC,EAAkCC,EAA8BC,EAAgCC,EAAsBC,EAAkBC,GAChR,MAAO,CACLb,EAAGA,GAAK,EACRC,EAAGA,GAAK,EACR2J,MAAOA,GAAS,EAChBC,OAAQA,GAAU,EAClB3I,GAAIA,GAAM,EACVC,GAAIA,GAAM,EACVd,KAAMA,GAAQ,OACdC,OAAQA,GAAU,OAClBC,YAAaA,GAAe,EAC5BC,gBAAiBA,GAAmB,GACpCC,cAAeA,GAAiB,OAChCC,eAAgBA,GAAkB,QAClCC,UAAWA,GAAa,GACxBC,QAASA,GAAW,EACpBC,WAAYA,GAAc,UAC1BC,IAAIC,EAAAA,EAAAA,KACJC,KAAM,OAEV,C,8CC3BO,SAASqJ,EAAWrK,EAAMC,EAAM2J,EAAcC,EAAgBS,EAAYC,EAAoBC,GACnG,MAAO,CACLxK,EAAGsK,EAAO,EAAItK,GAAK,EACnBC,EAAGqK,EAAO,EAAIrK,GAAK,EACnB2J,MAAOA,GAAS,EAChBC,OAAQA,GAAU,EAClBS,KAAMA,IAAQ,EACdC,SAAUA,GAAY,GACtBC,UAAWA,GAAa,GACxB1J,IAAIC,EAAAA,EAAAA,KACJC,KAAM,QAEV,C,miCCbO,SAASyJ,EAAiBC,EAAcC,GAyJ7C,MAAO,kDAAPjD,OAAyDgD,EAAMd,MAAK,cAAAlC,OAAagD,EAAMb,OAAM,mBAAAnC,OAAkBgD,EAAMd,MAAK,KAAAlC,OAAIgD,EAAMb,OAAM,MAAAnC,OAxJ1I,SAASkD,EAAeF,EAAcC,GACpC,IAAIE,EAAS,GACb,SAASC,EAAgBnK,EAAsBgK,GAC7C,GAAIA,EAAOI,iBAAkB,CAC3B,IAAIC,GAAuBC,EAAAA,EAAAA,IAA2BtK,GAEtD,OADIkK,EAAS,UAAHnD,OAAasD,EAAqB,GAAG,GAAE,KAAAtD,OAAIsD,EAAqB,GAAG,GAAE,KAAAtD,OAAIsD,EAAqB,GAAG,GAAE,KAAAtD,OAAIsD,EAAqB,GAAG,GAAE,KAAAtD,OAAIsD,EAAqB,GAAG,GAAE,KAAAtD,OAAIsD,EAAqB,GAAG,GAAE,IAEzM,CAGE,IAFA,IAAIH,EAAS,GACTK,EAA0BvK,EAAU4B,OAC/BW,EAAI,EAAGA,EAAIgI,EAAiBhI,IAAK,KAAAiI,EACxC,OAAoB,QAApBA,EAAQxK,EAAUuC,UAAE,IAAAiI,OAAA,EAAZA,EAAcnK,MACpB,IAAK,YACH6J,EAAOvH,KAAK,aAADoE,OAAc/G,EAAUuC,GAAGlD,EAAC,KAAA0H,OAAI/G,EAAUuC,GAAGjD,EAAC,MACzD,MACF,IAAK,QACH4K,EAAOvH,KAAK,SAADoE,OAAU/G,EAAUuC,GAAGlD,EAAC,KAAA0H,OAAI/G,EAAUuC,GAAGjD,EAAC,MACrD,MACF,IAAK,SACH4K,EAAOvH,KAAK,UAADoE,OAAW/G,EAAUuC,GAAGkI,IAAG,MACtC,MACF,IAAK,QACHP,EAAOvH,KAAK,SAADoE,OAAU/G,EAAUuC,GAAGkI,IAAG,MACrC,MACF,IAAK,QACHP,EAAOvH,KAAK,SAADoE,OAAU/G,EAAUuC,GAAGkI,IAAG,MAK3C,CACA,OAAOP,EAAOQ,KAAK,IAEvB,CAEA,SAASC,EAAa5I,EAAgBgI,GACpC,OAAOhI,EAAO6I,KAAI,SAAChD,GAAK,SAAAb,OAAQa,EAAMvI,EAAI0K,EAAM1K,EAAC,KAAA0H,OAAIa,EAAMtI,EAAIyK,EAAMzK,EAAC,IAAIoL,KAAK,IACjF,CA2CA,SAASG,EAAWC,EAAYf,GAC9B,IAAIgB,EAAoB1I,KAAK2I,IAAIF,EAAK7B,OAClCgC,EAAqB5I,KAAK2I,IAAIF,EAAK5B,QACnCgC,EAAgBJ,EAAKzL,EACrB8L,EAAgBL,EAAKxL,EAOzB,OANIwL,EAAK7B,MAAQ,IACfiC,GAASH,GAEPD,EAAK5B,OAAS,IAChBiC,GAASF,GAEJ,YAAPlE,OAAmBmE,EAAQnB,EAAM1K,EAAC,SAAA0H,OAAQoE,EAAQpB,EAAMzK,EAAC,aAAAyH,OAAYgE,EAAS,cAAAhE,OAAakE,EAAU,UAAAlE,OAAS+D,EAAKvK,GAAE,UAAAwG,OAAS+D,EAAKtK,GAAE,YAAAuG,OAAW+D,EAAKpL,KAAI,cAAAqH,OAAa+D,EAAKnL,OAAM,oBAAAoH,OAAmB+D,EAAKlL,YAAW,wBAAAmH,OAAuB+D,EAAKjL,gBAAe,sBAAAkH,OAAqB+D,EAAKhL,cAAa,uBAAAiH,OAAsB+D,EAAK/K,eAAc,iBAAAgH,OAAgBoD,EAAgBW,EAAK9K,UAAWgK,GAAO,eAAAjD,OAAc+D,EAAK7K,QAAO,kBAAA8G,OAAiB+D,EAAK5K,WAAU,MAAA6G,OAAKiD,EAAOoB,SAAW,GAAK,QAAHrE,OAAW+D,EAAK3K,GAAE,MAAI,KACjf,CAEA,SAASkL,EAAaC,EAAgBvB,GACpC,MAAO,eAAPhD,OAAsBuE,EAAO/L,GAAKwK,EAAM1K,EAAC,UAAA0H,OAASuE,EAAO9L,GAAKuK,EAAMzK,EAAC,SAAAyH,OAAQuE,EAAO7L,EAAC,YAAAsH,OAAWuE,EAAO5L,KAAI,cAAAqH,OAAauE,EAAO3L,OAAM,oBAAAoH,OAAmBuE,EAAO1L,YAAW,wBAAAmH,OAAuBuE,EAAOzL,gBAAe,sBAAAkH,OAAqBuE,EAAOxL,cAAa,uBAAAiH,OAAsBuE,EAAOvL,eAAc,iBAAAgH,OAAgBoD,EAAgBmB,EAAOtL,UAAWgK,GAAO,eAAAjD,OAAcuE,EAAOrL,QAAO,kBAAA8G,OAAiBuE,EAAOpL,WAAU,MAAA6G,OAAKiD,EAAOoB,SAAW,GAAK,QAAHrE,OAAWuE,EAAOnL,GAAE,MAAI,KACrd,CAEA,SAASoL,EAAcC,EAAkBzB,GACvC,MAAO,gBAAPhD,OAAuByE,EAAQjM,GAAKwK,EAAM1K,EAAC,UAAA0H,OAASyE,EAAQhM,GAAKuK,EAAMzK,EAAC,UAAAyH,OAASyE,EAAQjL,GAAE,UAAAwG,OAASyE,EAAQhL,GAAE,YAAAuG,OAAWyE,EAAQ9L,KAAI,cAAAqH,OAAayE,EAAQ7L,OAAM,oBAAAoH,OAAmByE,EAAQ5L,YAAW,wBAAAmH,OAAuByE,EAAQ3L,gBAAe,sBAAAkH,OAAqByE,EAAQ1L,cAAa,uBAAAiH,OAAsByE,EAAQzL,eAAc,iBAAAgH,OAAgBoD,EAAgBqB,EAAQxL,UAAWgK,GAAO,eAAAjD,OAAcyE,EAAQvL,QAAO,kBAAA8G,OAAiByE,EAAQtL,WAAU,MAAA6G,OAAKiD,EAAOoB,SAAW,GAAK,QAAHrE,OAAWyE,EAAQrL,GAAE,MAAI,KACxf,CAEA,SAASsL,EAAWC,EAAY3B,GAC9B,MAAO,aAAPhD,OAAoB2E,EAAKhL,GAAKqJ,EAAM1K,EAAC,UAAA0H,OAAS2E,EAAK/K,GAAKoJ,EAAMzK,EAAC,UAAAyH,OAAS2E,EAAK9K,GAAKmJ,EAAM1K,EAAC,UAAA0H,OAAS2E,EAAK7K,GAAKkJ,EAAMzK,EAAC,cAAAyH,OAAa2E,EAAK/L,OAAM,oBAAAoH,OAAmB2E,EAAK9L,YAAW,wBAAAmH,OAAuB2E,EAAK7L,gBAAe,sBAAAkH,OAAqB2E,EAAK5L,cAAa,uBAAAiH,OAAsB2E,EAAK3L,eAAc,iBAAAgH,OAAgBoD,EAAgBuB,EAAK1L,UAAWgK,GAAO,eAAAjD,OAAc2E,EAAKzL,QAAO,kBAAA8G,OAAiB2E,EAAKxL,WAAU,MAAA6G,OAAKiD,EAAOoB,SAAW,GAAK,QAAHrE,OAAW2E,EAAKvL,GAAE,MAAI,KAC3c,CAEA,SAASwL,EAAeC,EAAoB7B,GAC1C,MAAO,qBAAPhD,OAA4B4D,EAAaiB,EAAS7J,OAAQgI,GAAM,cAAAhD,OAAa6E,EAASjM,OAAM,oBAAAoH,OAAmB6E,EAAShM,YAAW,wBAAAmH,OAAuB6E,EAAS/L,gBAAe,sBAAAkH,OAAqB6E,EAAS9L,cAAa,uBAAAiH,OAAsB6E,EAAS7L,eAAc,iBAAAgH,OAAgBoD,EAAgByB,EAAS5L,UAAWgK,GAAO,eAAAjD,OAAc6E,EAAS3L,QAAO,kBAAA8G,OAAiB6E,EAAS1L,WAAU,MAAA6G,OAAKiD,EAAOoB,SAAW,GAAK,QAAHrE,OAAW6E,EAASzL,GAAE,MAAI,KAC5b,CAEA,SAAS0L,EAAcC,EAAkB/B,GACvC,MAAO,oBAAPhD,OAA2B4D,EAAamB,EAAQ/J,OAAQgI,GAAM,YAAAhD,OAAW+E,EAAQpM,KAAI,cAAAqH,OAAa+E,EAAQnM,OAAM,oBAAAoH,OAAmB+E,EAAQlM,YAAW,wBAAAmH,OAAuB+E,EAAQjM,gBAAe,sBAAAkH,OAAqB+E,EAAQhM,cAAa,uBAAAiH,OAAsB+E,EAAQ/L,eAAc,iBAAAgH,OAAgBoD,EAAgB2B,EAAQ9L,UAAWgK,GAAO,eAAAjD,OAAc+E,EAAQ7L,QAAO,kBAAA8G,OAAiB+E,EAAQ5L,WAAU,MAAA6G,OAAKiD,EAAOoB,SAAW,GAAK,QAAHrE,OAAW+E,EAAQ3L,GAAE,MAAI,KACxc,CAEA,SAAS4L,EAAW9K,EAAY8I,GAC9B,MAAO,YAAPhD,OA5EF,SAAiBhG,EAAMgJ,GACrB,IACqB9E,EADjBiF,EAAS,GAAG9E,EAAAC,EACItE,GAAC,IAArB,IAAAqE,EAAAE,MAAAL,EAAAG,EAAAG,KAAAC,MAAuB,KAAAwG,EAAdvG,EAAOR,EAAAS,MACd,OAAe,QAAfsG,EAAQvG,SAAO,IAAAuG,OAAA,EAAPA,EAAS3L,MACf,IAAK,IACH6J,EAAOvH,KAAK,KAADoE,OAAMtB,EAAQpG,EAAI0K,EAAM1K,EAAC,KAAA0H,OAAItB,EAAQnG,EAAIyK,EAAMzK,IAC1D,MACF,IAAK,IACH4K,EAAOvH,KAAK,KAADoE,OAAMtB,EAAQpG,EAAI0K,EAAM1K,EAAC,KAAA0H,OAAItB,EAAQnG,EAAIyK,EAAMzK,IAC1D,MACF,IAAK,IACH4K,EAAOvH,KAAK,KAADoE,OAAMtB,EAAQpG,EAAI0K,EAAM1K,IACnC,MACF,IAAK,IACH6K,EAAOvH,KAAK,KAADoE,OAAMtB,EAAQnG,EAAIyK,EAAMzK,IACnC,MACF,IAAK,IACH4K,EAAOvH,KAAK,KAADoE,OAAMtB,EAAQ/E,GAAKqJ,EAAM1K,EAAC,KAAA0H,OAAItB,EAAQ9E,GAAKoJ,EAAMzK,EAAC,KAAAyH,OAAItB,EAAQ7E,GAAKmJ,EAAM1K,EAAC,KAAA0H,OAAItB,EAAQ5E,GAAKkJ,EAAMzK,EAAC,KAAAyH,OAAItB,EAAQpG,EAAI0K,EAAM1K,EAAC,KAAA0H,OAAItB,EAAQnG,EAAIyK,EAAMzK,IAC1J,MACF,IAAK,IACH4K,EAAOvH,KAAK,KAADoE,OAAMtB,EAAQ7E,GAAKmJ,EAAM1K,EAAC,KAAA0H,OAAItB,EAAQ5E,GAAKkJ,EAAMzK,EAAC,KAAAyH,OAAItB,EAAQpG,EAAI0K,EAAM1K,EAAC,KAAA0H,OAAItB,EAAQnG,EAAIyK,EAAMzK,IAC1G,MACF,IAAK,IACH4K,EAAOvH,KAAK,KAADoE,OAAMtB,EAAQ/E,GAAKqJ,EAAM1K,EAAC,KAAA0H,OAAItB,EAAQ9E,GAAKoJ,EAAMzK,EAAC,KAAAyH,OAAItB,EAAQpG,EAAI0K,EAAM1K,EAAC,KAAA0H,OAAItB,EAAQnG,EAAIyK,EAAMzK,IAC1G,MACF,IAAK,IACH4K,EAAOvH,KAAK,KAADoE,OAAMtB,EAAQpG,EAAI0K,EAAM1K,EAAC,KAAA0H,OAAItB,EAAQnG,EAAIyK,EAAMzK,IAC1D,MACF,IAAK,IACH4K,EAAOvH,KAAK,KAADoE,OAAMtB,EAAQlF,GAAE,KAAAwG,OAAItB,EAAQjF,GAAE,KAAAuG,OAAItB,EAAQtC,cAAa,KAAA4D,OAAItB,EAAQrC,aAAY,KAAA2D,OAAItB,EAAQpC,UAAS,KAAA0D,OAAItB,EAAQpG,EAAI0K,EAAM1K,EAAC,KAAA0H,OAAItB,EAAQnG,EAAIyK,EAAMzK,IAC5J,MACF,IAAK,IACH4K,EAAOvH,KAAK,KAKlB,CAAC,OAAAqE,GAAA5B,EAAA6B,EAAAD,EAAA,SAAA5B,EAAA8B,GAAA,CACD,OAAOgD,EAAOQ,KAAK,IACrB,CAqCqBuB,CAAQhL,EAAKF,EAAGgJ,GAAM,YAAAhD,OAAW9F,EAAKvB,KAAI,cAAAqH,OAAa9F,EAAKtB,OAAM,oBAAAoH,OAAmB9F,EAAKrB,YAAW,wBAAAmH,OAAuB9F,EAAKpB,gBAAe,sBAAAkH,OAAqB9F,EAAKnB,cAAa,uBAAAiH,OAAsB9F,EAAKlB,eAAc,iBAAAgH,OAAgBoD,EAAgBlJ,EAAKjB,UAAWgK,GAAO,eAAAjD,OAAc9F,EAAKhB,QAAO,kBAAA8G,OAAiB9F,EAAKf,WAAU,MAAA6G,OAAKiD,EAAOoB,SAAW,GAAK,QAAHrE,OAAW9F,EAAKd,GAAE,MAAI,KACrZ,CAAC,IAEiC2I,EAFjCE,EAAA3D,EAEmB0E,EAAMH,UAAQ,IAAlC,IAAAZ,EAAA1D,MAAAwD,EAAAE,EAAAzD,KAAAC,MAAoC,KAAA0G,EAA3BtD,EAAOE,EAAApD,MACd,OAAe,QAAfwG,EAAQtD,SAAO,IAAAsD,OAAA,EAAPA,EAAS7L,MACf,IAAK,OACH6J,GAAUW,EAAWjC,EAASmB,GAC9B,MACF,IAAK,SACHG,GAAUmB,EAAazC,EAASmB,GAChC,MACF,IAAK,UACHG,GAAUqB,EAAc3C,EAASmB,GACjC,MACF,IAAK,OACHG,GAAUuB,EAAW7C,EAASmB,GAC9B,MACF,IAAK,WACHG,GAAUyB,EAAe/C,EAASmB,GAClC,MACF,IAAK,UACHG,GAAU2B,EAAcjD,EAASmB,GACjC,MACF,IAAK,OACHG,GAAU6B,EAAWnD,EAASmB,GAKpC,CAAC,OAAA/C,GAAAgC,EAAA/B,EAAAD,EAAA,SAAAgC,EAAA9B,GAAA,KAEmCiF,EAFnCC,EAAA/G,EAEoB0E,EAAMF,WAAS,IAApC,IAAAuC,EAAA9G,MAAA6G,EAAAC,EAAA7G,KAAAC,MAAsC,CACpC0E,GAAUD,EADKkC,EAAAzG,MACoBsE,EACrC,CAAC,OAAAhD,GAAAoF,EAAAnF,EAAAD,EAAA,SAAAoF,EAAAlF,GAAA,CAED,MAAO,KAAPH,OAAYiD,EAAOoB,SAAW,GAAK,QAAHrE,OAAWgD,EAAM5J,GAAE,KAAG,KAAA4G,OAAImD,EAAM,OAClE,CAC+ID,CAAeF,EAAOC,GAAO,SAC9K,C,gBChJO,SAASqC,EAAkBC,GAChC,IAAMC,EAAYD,EAAM7B,IAAMpI,KAAKoB,GAAM,IACzC,MAAO,CACL,CAAC,EAAGpB,KAAKmK,IAAID,GAAM,GACnB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GAEX,CAEO,SAASE,EAAkBC,GAChC,IAAMH,EAAYG,EAAMjC,IAAMpI,KAAKoB,GAAM,IACzC,MAAO,CACL,CAAC,EAAG,EAAG,GACP,CAACpB,KAAKmK,IAAID,GAAM,EAAG,GACnB,CAAC,EAAG,EAAG,GAEX,CAEO,SAASI,EAAiBC,EAAWC,GAO1C,IANA,IAAI3C,EAAiB,CACnB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGA3H,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIuK,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrB7C,EAAO3H,GAAGuK,IAAMF,EAAErK,GAAGwK,GAAKF,EAAEE,GAAGD,GAKrC,OAAO5C,CACT,CAEO,SAASI,EAA2BtK,GAQzC,IAPA,IA9CmCgN,EAC7BT,EAT4BU,EARIC,EA8DlCC,EAAyB,CAC3B,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEL5C,EAAkBvK,EAAU4B,OAEvBW,EAAI,EAAGA,EAAIgI,EAAiBhI,IAAK,KAAAiI,EACpCH,EACJ,OAAoB,QAApBG,EAAQxK,EAAUuC,UAAE,IAAAiI,OAAA,EAAZA,EAAcnK,MACpB,IAAK,YACHgK,EAxEC,CACL,CAAC,EAAG,GAFgC6C,EAyEelN,EAAUuC,IAvE5ClD,GACjB,CAAC,EAAG,EAAG6N,EAAU5N,GACjB,CAAC,EAAG,EAAG,IAsEH,MACF,IAAK,QACH+K,EAnEC,CACL,EAFgC4C,EAoEejN,EAAUuC,IAlElDlD,EAAG,EAAG,GACb,CAAC,EAAG4N,EAAM3N,EAAG,GACb,CAAC,EAAG,EAAG,IAiEH,MACF,IAAK,SA9D0B0N,EA+DehN,EAAUuC,GA9DtDgK,WAAYS,EAAOvC,IAAMpI,KAAKoB,GAAM,IA8DpC4G,EA7DC,CACL,CAAChI,KAAKsB,IAAI4I,IAAOlK,KAAKwB,IAAI0I,GAAM,GAChC,CAAClK,KAAKwB,IAAI0I,GAAMlK,KAAKsB,IAAI4I,GAAM,GAC/B,CAAC,EAAG,EAAG,IA2DH,MACF,IAAK,QACHlC,EAAuBgC,EAAkBrM,EAAUuC,IACnD,MACF,IAAK,QACH8H,EAAuBoC,EAAkBzM,EAAUuC,IACnD,MACF,QACE8H,EAAuB,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAIb8C,EAAiBR,EAAiBtC,EAAsB8C,EAC1D,CACA,OAAOA,CACT,CAEO,SAAS7F,EAAgBvF,EAAgB/B,GAK9C,IAAMqK,EAAuBC,EAA2BtK,GACxD,OAAO+B,EAAO6I,KAAI,SAAChD,GAAK,OALxB,SAAmCwF,EAAgBxF,GAEjD,MAAO,CAAEvI,EADU+N,EAAO,GAAG,GAAKxF,EAAMvI,EAAI+N,EAAO,GAAG,GAAKxF,EAAMtI,EAAI8N,EAAO,GAAG,GACnE9N,EADuE8N,EAAO,GAAG,GAAKxF,EAAMvI,EAAI+N,EAAO,GAAG,GAAKxF,EAAMtI,EAAI8N,EAAO,GAAG,GAEjJ,CAE6BC,CAA0BhD,EAAsBzC,EAAM,GACrF,C,mIC3GM0F,EAAkCC,SAASC,cAAc,MACzDC,EAA8CF,SAASC,cAAc,M,aCHvEE,EAAU,CACZC,cAAc,EACdC,kBAAkB,GAGb,SAASC,EAAQC,EAAaC,GACnC,IAA4B,IAAxBL,EAAQK,GAAuB,CACjC,IAAMC,EAAOT,SAASU,cAAc,QACpCD,EAAKE,aAAa,OAAQJ,GAC1BE,EAAKE,aAAa,MAAO,cACzBX,SAASY,KAAKC,YAAYJ,GAC1BN,EAAQK,IAAc,CACxB,CACF,C,kgCCYAM,OAAOC,OAAS,CACdC,KAAM,CACJjE,2BAAAA,EAAAA,GACAhD,gBAAAA,EAAAA,GACA7H,EAAG,WACD,IAAI+O,GAAS9E,EAAAA,EAAAA,GAAW,EAAG,EAAG,IAAK,KAAK,GACpC+E,GAAQhF,EAAAA,EAAAA,GACV,GACA,GACA,GACA,GACA,GACA,GACA,OACA,KACA,KACA,KACA,KACA,KACA,CACE,CAAEpJ,KAAM,SAAUoK,IAAK,IACvB,CAAEpK,KAAM,YAAahB,EAAG,GAAIC,EAAG,KAEjC,EACA,MAEFkP,EAAO5E,SAASjH,KAAK8L,GACrB,IAAIC,GAAShF,EAAAA,EAAAA,GAAW,EAAG,EAAG,GAAI,IAAI,EAAO,KAAM,MAC/CiF,GAAQlF,EAAAA,EAAAA,GAAU,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,QACtCmF,GAAUxP,EAAAA,EAAAA,GAAY,EAAG,EAAG,GAAI,GAAI,GAAI,OAAQ,KAAM,KAAM,KAAM,KAAM,KAAM,CAAC,CAAEiB,KAAM,QAAShB,EAAG,IAAKC,EAAG,MAAQ,GAAK,MAC5HoP,EAAO9E,SAASjH,KAAKgM,GACrBD,EAAO9E,SAASjH,KAAKiM,GACrBJ,EAAO3E,UAAUlH,KAAK+L,GACtBG,QAAQC,IAAIC,KAAKC,UAAUR,IAC3BK,QAAQC,KACNhF,EAAAA,EAAAA,GAAiB0E,EAAQ,CACvBpE,kBAAkB,EAClBgB,UAAU,KAEZ,IACmCnG,EADnCG,EAAAC,EACoBqJ,EAAO9E,UAAQ,IAArC,IAAAxE,EAAAE,MAAAL,EAAAG,EAAAG,KAAAC,MAAuC,KAA5BoD,EAAO3D,EAAAS,MAChB,IACE,IAAIuJ,GAAItG,EAAAA,EAAAA,IAAqBC,GAC7BiG,QAAQC,IAAIlG,GACZiG,QAAQC,IAAIG,GACZ,IAAIC,GAAIlO,EAAAA,EAAAA,IAAWiO,EAAG,GAAG,GACzBJ,QAAQC,IAAII,EACd,CAAE,MAAOjI,GACP4H,QAAQC,IAAI7H,EACd,CACF,CAAC,OAAAD,GAAA5B,EAAA6B,EAAAD,EAAA,SAAA5B,EAAA8B,GAAA,CACH,GAEFiI,QAAS,CACPC,WAAAA,EAAAA,GACAC,gBAAAA,EAAAA,IAEFC,UAAW,CACTC,YAAa,CACXC,gBF/EC,WACLlC,EAAmBY,aAAa,aAAa,GAC7CT,EAA+BS,aAAa,aAAa,EAC3D,EE6EMuB,iBF3EC,WACLnC,EAAmBY,aAAa,aAAa,GAC7CT,EAA+BS,aAAa,aAAa,EAC3D,EEyEMwB,yBFvEC,WACL,IAAMC,EAAeC,OAAOtC,EAAmBE,cAAc,sBAAsB9H,QAAU,WACvFuD,EAAgB4G,SAASvC,EAAmBE,cAAc,uBAAuB9H,QAAU,GAC3FwD,EAAiB2G,SAASvC,EAAmBE,cAAc,wBAAwB9H,QAAU,GAC/FoK,GAA2BC,EAAAA,EAAAA,IAAqB9G,EAAOC,EAAQ,KAAM,KAAMyG,IAC/EK,EAAAA,EAAAA,IAAaF,EAAS3P,GACxB,IEoEE8P,WAAY,YACVC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,MACAtB,QAAQC,IAAI,EACd,EACAsB,mBAAoB,WAClBvC,EAAQ,mFAAoF,gBAC5FA,EAAQ,sHAAuH,mBACjI,GAGF,QAAeQ,OAAa,M,iCCpGrB,IAAYjO,EAAWiQ,EAAQ,KAAvBC,E","sources":["webpack://vector/./src/graphic/elements/circle.ts","webpack://vector/./src/graphic/elements/ellipse.ts","webpack://vector/./src/graphic/elements/line.ts","webpack://vector/./src/graphic/elements/path.ts","webpack://vector/./src/graphic/elements/polygon.ts","webpack://vector/./src/graphic/elements/polyline.ts","webpack://vector/./src/graphic/elements/rect.ts","webpack://vector/./src/graphic/plane/index.ts","webpack://vector/./src/graphic/render/index.ts","webpack://vector/./src/graphic/transformation/index.ts","webpack://vector/./src/new_document/index.ts","webpack://vector/./src/utilities/lazy-css.ts","webpack://vector/./src/index.ts","webpack://vector/./src/utilities/index.ts"],"sourcesContent":["import { x, y, cx, cy, r, fill, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\n\nexport interface circle {\n  x: x;\n  y: y;\n  cx: cx;\n  cy: cy;\n  r: r;\n\n  fill?: fill;\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform;\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildCircle(x: x, y: y, cx: cx, cy: cy, r: r, fill: fill, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): circle {\n  return {\n    x: x || 0,\n    y: y || 0,\n    cx: cx || 0,\n    cy: cy || 0,\n    r: r || 0,\n    fill: fill || 'none',\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'circle'\n  };\n}\n","import { cx, cy, rx, ry, fill, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType, x, y } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\n\nexport interface ellipse {\n  x: x;\n  y: y;\n  cx: cx;\n  cy: cy;\n  rx: rx;\n  ry: ry;\n\n  fill?: fill;\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform;\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildEllipse(x: x, y: y, cx: cx, cy: cy, rx: rx, ry: ry, fill: fill, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): ellipse {\n  return {\n    x: x || 0,\n    y: y || 0,\n    cx: cx || 0,\n    cy: cy || 0,\n    rx: rx || 0,\n    ry: ry || 0,\n    fill: fill || 'none',\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'ellipse'\n  };\n}\n","import { x, y, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\n\nexport interface line {\n  x1: x;\n  y1: y;\n  x2: x;\n  y2: y;\n\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform; // Transformations applied to the line\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildLine(x1: x, y1: y, x2: x, y2: y, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): line {\n  return {\n    x1: x1 || 0,\n    y1: y1 || 0,\n    x2: x2 || 0,\n    y2: y2 || 0,\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'line'\n  };\n}\n","import { d, fill, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType, point, points } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\nimport { rect } from './rect';\nimport { circle } from './circle';\nimport { ellipse } from './ellipse';\nimport { line } from './line';\nimport { polyline } from './polyline';\nimport { polygon } from './polygon';\nimport { element } from './index';\nimport { transformPoints } from '../transformation/index';\n\nexport interface path {\n  d: d;\n\n  fill?: fill;\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform; // Transformations applied to the path\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildPath(d: d, fill: fill, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): path {\n  return {\n    d: d || [],\n    fill: fill || 'none',\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'path'\n  };\n}\n\nexport function samplePath(path: path, precision: number = 1, flatten: boolean = false): points {\n  const commands = path.d;\n  let points: points = [];\n\n  function interpolateLinear(p0: point, p1: point, precision: number): points {\n    let segmentPoints: points = [];\n    const distance = Math.hypot(p1.x - p0.x, p1.y - p0.y);\n    const step = distance / precision;\n    for (let i = 0; i < step; i++) {\n      const t = Math.min(Math.max(i / step, 0), 1);\n      const x = p0.x + (p1.x - p0.x) * t;\n      const y = p0.y + (p1.y - p0.y) * t;\n      segmentPoints.push({ x, y });\n    }\n    return segmentPoints;\n  }\n\n  function interpolateCubicBezier(p0: point, c1: point, c2: point, p1: point, precision: number): points {\n    let segmentPoints: points = [];\n    const distance = Math.hypot(p1.x - p0.x, p1.y - p0.y);\n    const step = distance / precision;\n    for (let i = 0; i < step; i++) {\n      const t = Math.min(Math.max(i / step, 0), 1);\n      const x = Math.pow(1 - t, 3) * p0.x + 3 * Math.pow(1 - t, 2) * t * c1.x + 3 * (1 - t) * Math.pow(t, 2) * c2.x + Math.pow(t, 3) * p1.x;\n      const y = Math.pow(1 - t, 3) * p0.y + 3 * Math.pow(1 - t, 2) * t * c1.y + 3 * (1 - t) * Math.pow(t, 2) * c2.y + Math.pow(t, 3) * p1.y;\n      segmentPoints.push({ x, y });\n    }\n    return segmentPoints;\n  }\n\n  function interpolateQuadraticBezier(p0: point, c: point, p1: point, precision: number): points {\n    let segmentPoints: points = [];\n    const distance = Math.hypot(p1.x - p0.x, p1.y - p0.y);\n    const step = distance / precision;\n    for (let i = 0; i < step; i++) {\n      const t = Math.min(Math.max(i / step, 0), 1);\n      const x = Math.pow(1 - t, 2) * p0.x + 2 * (1 - t) * t * p1.x + Math.pow(t, 2) * c.x;\n      const y = Math.pow(1 - t, 2) * p0.y + 2 * (1 - t) * t * p1.y + Math.pow(t, 2) * c.y;\n      segmentPoints.push({ x, y });\n    }\n    return segmentPoints;\n  }\n\n  function interpolateArc(p0: point, rx: number, ry: number, xAxisRotation: number, largeArcFlag: 0 | 1, sweepFlag: 0 | 1, x: number, y: number, precision: number): points {\n    const distance = Math.hypot(x - p0.x, y - p0.y);\n    const step = Math.round(distance / precision);\n\n    // Helper to convert degrees to radians\n    const degToRad = (deg) => (deg * Math.PI) / 180;\n\n    // Calculate rotation matrix\n    const rotationRad = degToRad(xAxisRotation);\n    const cosRot = Math.cos(rotationRad);\n    const sinRot = Math.sin(rotationRad);\n\n    // Compute center of the ellipse and the angles\n    const dx = (p0.x - x) / 2;\n    const dy = (p0.y - y) / 2;\n\n    // Transform to the ellipse's coordinate space\n    const x1p = cosRot * dx + sinRot * dy;\n    const y1p = -sinRot * dx + cosRot * dy;\n\n    // Correct radii if necessary\n    const rxSq = rx ** 2;\n    const rySq = ry ** 2;\n    const x1pSq = x1p ** 2;\n    const y1pSq = y1p ** 2;\n\n    let radicant = (rxSq * rySq - rxSq * y1pSq - rySq * x1pSq) / (rxSq * y1pSq + rySq * x1pSq);\n    radicant = Math.max(0, radicant); // Ensure non-negative\n    const coef = (largeArcFlag !== sweepFlag ? 1 : -1) * Math.sqrt(radicant);\n\n    const cxp = coef * ((rx * y1p) / ry);\n    const cyp = coef * (-(ry * x1p) / rx);\n\n    // Transform back to the original coordinate space\n    const cx = cosRot * cxp - sinRot * cyp + (p0.x + x) / 2;\n    const cy = sinRot * cxp + cosRot * cyp + (p0.y + y) / 2;\n\n    // Start and end angles\n    const theta1 = Math.atan2((y1p - cyp) / ry, (x1p - cxp) / rx);\n    const deltaTheta = Math.atan2((-y1p - cyp) / ry, (-x1p - cxp) / rx) - theta1;\n\n    // Ensure the angle is swept in the correct direction\n    const adjustedDeltaTheta = sweepFlag === 0 && deltaTheta > 0 ? deltaTheta - 2 * Math.PI : deltaTheta;\n    const finalDeltaTheta = sweepFlag === 1 && deltaTheta < 0 ? deltaTheta + 2 * Math.PI : adjustedDeltaTheta;\n\n    // Sample the arc\n    const segmentPoints = [];\n    for (let i = 0; i < step; i++) {\n      const t = i / step; // Proportion of the arc\n      const theta = theta1 + t * finalDeltaTheta;\n\n      // Parametric equation of the ellipse\n      const x = cosRot * (rx * Math.cos(theta)) - sinRot * (ry * Math.sin(theta)) + cx;\n      const y = sinRot * (rx * Math.cos(theta)) + cosRot * (ry * Math.sin(theta)) + cy;\n\n      segmentPoints.push({ x, y });\n    }\n    return segmentPoints;\n  }\n\n  let currentPoint: point = { x: 0, y: 0 };\n  let previousControlPoint: point | null = null;\n\n  for (const command of commands) {\n    switch (command.type) {\n      case 'M':\n        currentPoint = { x: command.x, y: command.y };\n        points.push(currentPoint);\n        previousControlPoint = null;\n        break;\n      case 'L':\n        const lineEnd = { x: command.x, y: command.y };\n        points.push(...interpolateLinear(currentPoint, lineEnd, precision));\n        currentPoint = lineEnd;\n        previousControlPoint = null;\n        break;\n      case 'H':\n        const horizontalEnd = { x: command.x, y: currentPoint.y };\n        points.push(...interpolateLinear(currentPoint, horizontalEnd, precision));\n        currentPoint = horizontalEnd;\n        previousControlPoint = null;\n        break;\n      case 'V':\n        const verticalEnd = { x: currentPoint.x, y: command.y };\n        points.push(...interpolateLinear(currentPoint, verticalEnd, precision));\n        currentPoint = verticalEnd;\n        previousControlPoint = null;\n        break;\n      case 'C':\n        const cubicStart = currentPoint;\n        const cubicControl1 = { x: command.x1, y: command.y1 };\n        const cubicControl2 = { x: command.x2, y: command.y2 };\n        const cubicEnd = { x: command.x, y: command.y };\n        points.push(...interpolateCubicBezier(cubicStart, cubicControl1, cubicControl2, cubicEnd, precision));\n        currentPoint = cubicEnd;\n        previousControlPoint = cubicControl2;\n        break;\n      case 'S':\n        const smoothStart = currentPoint;\n        const smoothControl1 = previousControlPoint ? { x: 2 * smoothStart.x - previousControlPoint.x, y: 2 * smoothStart.y - previousControlPoint.y } : smoothStart;\n        const smoothControl2 = { x: command.x2, y: command.y2 };\n        const smoothEnd = { x: command.x, y: command.y };\n        points.push(...interpolateCubicBezier(smoothStart, smoothControl1, smoothControl2, smoothEnd, precision));\n        currentPoint = smoothEnd;\n        previousControlPoint = smoothControl2;\n        break;\n      case 'Q':\n        const quadStart = currentPoint;\n        const quadControl = { x: command.x, y: command.y };\n        const quadEnd = { x: command.x1, y: command.y1 };\n        points.push(...interpolateQuadraticBezier(quadStart, quadControl, quadEnd, precision));\n        currentPoint = quadEnd;\n        previousControlPoint = quadControl;\n        break;\n      case 'T':\n        const smoothQuadStart = currentPoint;\n        const smoothQuadControl = previousControlPoint ? { x: 2 * smoothQuadStart.x - previousControlPoint.x, y: 2 * smoothQuadStart.y - previousControlPoint.y } : smoothQuadStart;\n        const smoothQuadEnd = { x: command.x, y: command.y };\n        points.push(...interpolateQuadraticBezier(smoothQuadStart, smoothQuadControl, smoothQuadEnd, precision));\n        currentPoint = smoothQuadEnd;\n        previousControlPoint = smoothQuadControl;\n        break;\n      case 'A':\n        points.push(...interpolateArc(currentPoint, command.rx, command.ry, command.xAxisRotation, command.largeArcFlag, command.sweepFlag, command.x, command.y, precision));\n        currentPoint = { x: command.x, y: command.y };\n        previousControlPoint = null;\n        break;\n      case 'Z':\n        if (points.length > 0) {\n          points.push(points[0]); // Close path by connecting to the start\n        }\n        previousControlPoint = null;\n        break;\n      default:\n        throw new Error(`Unsupported command type: ${command.type}`);\n    }\n  }\n  if (flatten) {\n    if (typeof path.transform === 'object' && Array.isArray(path.transform)) {\n      if (path.transform.length > 0) {\n        points = transformPoints(points, path.transform);\n      }\n    }\n  }\n  return points;\n}\n\nexport function smoothPath(path: path): path {\n  function simplifyPoints(points: points, tolerance: number): points {\n    function distanceToSegment(point: point, start: point, end: point): number {\n      let dx = end.x - start.x;\n      let dy = end.y - start.y;\n      let d = dx * dx + dy * dy;\n      let t = ((point.x - start.x) * dx + (point.y - start.y) * dy) / d;\n\n      if (t < 0) {\n        dx = point.x - start.x;\n        dy = point.y - start.y;\n      } else if (t > 1) {\n        dx = point.x - end.x;\n        dy = point.y - end.y;\n      } else {\n        var closestPoint = { x: start.x + t * dx, y: start.y + t * dy };\n        dx = point.x - closestPoint.x;\n        dy = point.y - closestPoint.y;\n      }\n\n      return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    if (points.length < 3) {\n      return points;\n    }\n\n    let dmax = 0;\n    let index = 0;\n\n    // Find the point with the maximum distance\n    for (let i = 1; i < points.length - 1; i++) {\n      let d = distanceToSegment(points[i], points[0], points[points.length - 1]);\n      if (d > dmax) {\n        index = i;\n        dmax = d;\n      }\n    }\n\n    // If max distance is greater than tolerance, split the curve\n    if (dmax > tolerance) {\n      let leftPoints = points.slice(0, index + 1);\n      let rightPoints = points.slice(index);\n      let simplifiedLeft = simplifyPoints(leftPoints, tolerance);\n      let simplifiedRight = simplifyPoints(rightPoints, tolerance);\n      return simplifiedLeft.slice(0, simplifiedLeft.length - 1).concat(simplifiedRight);\n    } else {\n      return [points[0], points[points.length - 1]];\n    }\n  }\n\n  const points = samplePath(path, 1);\n  const simplifiedPoints = simplifyPoints(points, 1);\n  const simplifiedPointsLength = simplifiedPoints.length;\n  let simplifiedCommands = [];\n\n  for (let i = 0; i < simplifiedPointsLength; i++) {\n    const currentSimplifiedPoint = simplifiedPoints[i];\n    const nextSimplifiedPoint = simplifiedPoints[i + 1] || currentSimplifiedPoint;\n    if (i === 0) {\n      simplifiedCommands.push({ type: 'M', x: currentSimplifiedPoint.x, y: currentSimplifiedPoint.y });\n    } else {\n      if (i === simplifiedPointsLength - 1) {\n        simplifiedCommands.push({ type: 'L', x: currentSimplifiedPoint.x, y: currentSimplifiedPoint.y });\n      } else {\n        simplifiedCommands.push({ type: 'Q', x1: currentSimplifiedPoint.x, y1: currentSimplifiedPoint.y, x: (currentSimplifiedPoint.x + nextSimplifiedPoint.x) / 2, y: (currentSimplifiedPoint.y + nextSimplifiedPoint.y) / 2 });\n      }\n    }\n  }\n  path.d = simplifiedCommands;\n  return path;\n}\n\nexport function buildPathFromElement(element: element): path {\n  function rectToCommands(element: rect): d {\n    const x = element.x;\n    const y = element.y;\n    const width = element.width;\n    const height = element.height;\n    let rx = element.rx || 0;\n    let ry = element.ry || 0;\n\n    let commands: d = [];\n    if (rx === 0 && ry === 0) {\n      commands.push({ type: 'M', x: x, y: y });\n      commands.push({ type: 'H', x: x + width });\n      commands.push({ type: 'V', y: y + height });\n      commands.push({ type: 'H', x: x });\n      commands.push({ type: 'Z' });\n    } else {\n      commands.push({ type: 'M', x: x + rx, y: y });\n      commands.push({ type: 'H', x: x + width - rx });\n      commands.push({ type: 'A', rx: rx, ry: ry, xAxisRotation: 0, largeArcFlag: 0, sweepFlag: 1, x: x + width, y: y + ry });\n      commands.push({ type: 'V', y: y + height - ry });\n      commands.push({ type: 'A', rx: rx, ry: ry, xAxisRotation: 0, largeArcFlag: 0, sweepFlag: 1, x: x + width - rx, y: y + height });\n      commands.push({ type: 'H', x: x + rx });\n      commands.push({ type: 'A', rx: rx, ry: ry, xAxisRotation: 0, largeArcFlag: 0, sweepFlag: 1, x: x, y: y + height - ry });\n      commands.push({ type: 'V', y: y + ry });\n      commands.push({ type: 'A', rx: rx, ry: ry, xAxisRotation: 0, largeArcFlag: 0, sweepFlag: 1, x: x + rx, y: y });\n      commands.push({ type: 'Z' });\n    }\n    return commands;\n  }\n\n  function circleToCommands(element: circle): d {\n    const cx = element.cx;\n    const cy = element.cy;\n    const r = element.r;\n    let commands: d = [];\n    commands.push({ type: 'M', x: cx - r, y: cy });\n    commands.push({ type: 'A', rx: r, ry: r, xAxisRotation: 0, largeArcFlag: 1, sweepFlag: 0, x: cx + r, y: cy });\n    commands.push({ type: 'A', rx: r, ry: r, xAxisRotation: 0, largeArcFlag: 1, sweepFlag: 0, x: cx - r, y: cy });\n    commands.push({ type: 'Z' });\n    return commands;\n  }\n\n  function ellipseToCommands(element: ellipse): d {\n    const cx = element.cx;\n    const cy = element.cy;\n    const rx = element.rx;\n    const ry = element.ry;\n    let commands: d = [];\n    commands.push({ type: 'M', x: cx - rx, y: cy });\n    commands.push({ type: 'A', rx: rx, ry: ry, xAxisRotation: 0, largeArcFlag: 1, sweepFlag: 0, x: cx + rx, y: cy });\n    commands.push({ type: 'A', rx: rx, ry: ry, xAxisRotation: 0, largeArcFlag: 1, sweepFlag: 0, x: cx - rx, y: cy });\n    commands.push({ type: 'Z' });\n    return commands;\n  }\n\n  function lineToCommands(element: line): d {\n    const x1 = element.x1;\n    const y1 = element.y1;\n    const x2 = element.x2;\n    const y2 = element.y2;\n    let commands: d = [];\n    commands.push({ type: 'M', x: x1, y: y1 });\n    commands.push({ type: 'L', x: x2, y: y2 });\n    return commands;\n  }\n\n  function polyToCommands(element: polyline | polygon): d {\n    const points = element.points;\n    let commands: d = [];\n    let index = 0;\n    for (const point of points) {\n      const x = point.x;\n      const y = point.y;\n      if (index === 0) {\n        commands.push({ type: 'M', x: x, y: y });\n      } else {\n        commands.push({ type: 'L', x: x, y: y });\n      }\n      index += 1;\n    }\n    if (element.type === 'polygon') {\n      commands.push({ type: 'Z' });\n    }\n    return commands;\n  }\n  let commands = [];\n  switch (element.type) {\n    case 'rect':\n      commands = rectToCommands(element);\n      break;\n    case 'circle':\n      commands = circleToCommands(element);\n      break;\n    case 'ellipse':\n      commands = ellipseToCommands(element);\n      break;\n    case 'line':\n      commands = lineToCommands(element);\n      break;\n    case 'polyline':\n      commands = polyToCommands(element);\n      break;\n    case 'polygon':\n      commands = polyToCommands(element);\n      break;\n    case 'path':\n      commands = element.d;\n      break;\n    default:\n      throw new Error(`Unsupported element: ${element?.type}`);\n  }\n  return buildPath(commands, element?.fill, element?.stroke, element?.strokeWidth, element?.strokeDasharray, element?.strokeLinecap, element?.strokeLinejoin, element?.transform, element?.opacity, element?.visibility);\n}\n","import { points, fill, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\n\nexport interface polygon {\n  points: points;\n\n  fill?: fill;\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform; // Transformations applied to the polygon\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildPolygon(points: points, fill: fill, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): polygon {\n  return {\n    points: points || [],\n    fill: fill || 'none',\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'polygon'\n  };\n}\n","import { points, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\n\nexport interface polyline {\n  points: points;\n\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform; // Transformations applied to the polyline\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildPolyline(points: points, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): polyline {\n  return {\n    points: points || [],\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'polyline'\n  };\n}\n","import { x, y, width, height, rx, ry, fill, stroke, strokeWidth, strokeDasharray, strokeLinecap, strokeLinejoin, opacity, visibility, transform, id, elementType } from '../attributes/index';\nimport { uuidv4 } from '../../utilities/index';\n\nexport interface rect {\n  x: x;\n  y: y;\n  width: width;\n  height: height;\n  rx?: rx;\n  ry?: ry;\n\n  fill?: fill;\n  stroke?: stroke;\n  strokeWidth?: strokeWidth;\n  strokeDasharray?: strokeDasharray;\n  strokeLinecap?: strokeLinecap;\n  strokeLinejoin?: strokeLinejoin;\n\n  transform?: transform; // Transformations applied to the rectangle\n  opacity?: opacity;\n  visibility?: visibility;\n  id: id;\n  type: elementType;\n}\n\nexport function buildRect(x: x, y: y, width: width, height: height, rx: rx, ry: ry, fill: fill, stroke: stroke, strokeWidth: strokeWidth, strokeDasharray: strokeDasharray, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, transform: transform, opacity: opacity, visibility: visibility): rect {\n  return {\n    x: x || 0,\n    y: y || 0,\n    width: width || 0,\n    height: height || 0,\n    rx: rx || 0,\n    ry: ry || 0,\n    fill: fill || 'none',\n    stroke: stroke || 'none',\n    strokeWidth: strokeWidth || 0,\n    strokeDasharray: strokeDasharray || '',\n    strokeLinecap: strokeLinecap || 'butt',\n    strokeLinejoin: strokeLinejoin || 'miter',\n    transform: transform || [],\n    opacity: opacity || 1,\n    visibility: visibility || 'visible',\n    id: uuidv4(),\n    type: 'rect'\n  };\n}\n","import { uuidv4 } from '../../utilities/index';\nimport { x, y, width, height, id } from '../attributes/index';\nimport { elements } from '../elements/index';\n\ntype root = boolean;\n\nexport interface plane {\n  x: x;\n  y: y;\n  width: width;\n  height: height;\n  root: root;\n  elements: elements;\n  subPlanes: Array<plane>;\n  id: id;\n  type: 'plane';\n}\n\nexport function buildPlane(x: x, y: y, width: width, height: height, root: root, elements: elements, subPlanes: Array<plane>): plane {\n  return {\n    x: root ? 0 : x || 0,\n    y: root ? 0 : y || 0,\n    width: width || 0,\n    height: height || 0,\n    root: root || false,\n    elements: elements || [],\n    subPlanes: subPlanes || [],\n    id: uuidv4(),\n    type: 'plane'\n  };\n}\n","import { plane } from '../plane/index';\n\nimport { rect } from '../elements/rect';\nimport { circle } from '../elements/circle';\nimport { ellipse } from '../elements/ellipse';\nimport { line } from '../elements/line';\nimport { polyline } from '../elements/polyline';\nimport { polygon } from '../elements/polygon';\n\nimport { createTransformationMatrix } from '../transformation/index';\nimport { points, transform } from '../attributes/index';\n\ninterface renderConfig {\n  flattenTransform: boolean;\n  exceptID: boolean;\n}\n\nexport function renderPlaneAsXML(plane: plane, config: renderConfig): string {\n  function renderElements(plane: plane, config: renderConfig): string {\n    var result = '';\n    function renderTransform(transform: transform, config: renderConfig): string {\n      if (config.flattenTransform) {\n        var transformationMatrix = createTransformationMatrix(transform);\n        var result = `matrix(${transformationMatrix[0][0]},${transformationMatrix[1][0]},${transformationMatrix[0][1]},${transformationMatrix[1][1]},${transformationMatrix[0][2]},${transformationMatrix[1][2]})`;\n        return result;\n      } else {\n        var result = [];\n        var transformLength: number = transform.length;\n        for (var i = 0; i < transformLength; i++) {\n          switch (transform[i]?.type) {\n            case 'translate':\n              result.push(`translate(${transform[i].x},${transform[i].y})`);\n              break;\n            case 'scale':\n              result.push(`scale(${transform[i].x},${transform[i].y})`);\n              break;\n            case 'rotate':\n              result.push(`rotate(${transform[i].deg})`);\n              break;\n            case 'skewX':\n              result.push(`skewX(${transform[i].deg})`);\n              break;\n            case 'skewY':\n              result.push(`skewY(${transform[i].deg})`);\n              break;\n            default:\n              break;\n          }\n        }\n        return result.join(' ');\n      }\n    }\n\n    function renderPoints(points: points, plane: plane): string {\n      return points.map((point) => `${point.x + plane.x},${point.y + plane.y}`).join(' ');\n    }\n\n    function renderD(d: d, plane: plane): string {\n      var result = [];\n      for (var command of d) {\n        switch (command?.type) {\n          case 'M':\n            result.push(`M ${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'L':\n            result.push(`L ${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'H':\n            result.push(`H ${command.x + plane.x}`);\n            break;\n          case 'V':\n            result.push(`V ${command.y + plane.y}`);\n            break;\n          case 'C':\n            result.push(`C ${command.x1 + plane.x} ${command.y1 + plane.y},${command.x2 + plane.x} ${command.y2 + plane.y},${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'S':\n            result.push(`S ${command.x2 + plane.x} ${command.y2 + plane.y},${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'Q':\n            result.push(`Q ${command.x1 + plane.x} ${command.y1 + plane.y} ${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'T':\n            result.push(`T ${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'A':\n            result.push(`A ${command.rx} ${command.ry} ${command.xAxisRotation} ${command.largeArcFlag} ${command.sweepFlag} ${command.x + plane.x} ${command.y + plane.y}`);\n            break;\n          case 'Z':\n            result.push('Z');\n            break;\n          default:\n            break;\n        }\n      }\n      return result.join(' ');\n    }\n\n    function renderRect(rect: rect, plane: plane): string {\n      var rectWidth: number = Math.abs(rect.width);\n      var rectHeight: number = Math.abs(rect.height);\n      var rectX: number = rect.x;\n      var rectY: number = rect.y;\n      if (rect.width < 0) {\n        rectX -= rectWidth;\n      }\n      if (rect.height < 0) {\n        rectY -= rectHeight;\n      }\n      return `<rect x=\"${rectX + plane.x}\" y=\"${rectY + plane.y}\" width=\"${rectWidth}\" height=\"${rectHeight}\" rx=\"${rect.rx}\" ry=\"${rect.ry}\" fill=\"${rect.fill}\" stroke=\"${rect.stroke}\" stroke-width=\"${rect.strokeWidth}\" stroke-dasharray=\"${rect.strokeDasharray}\" stroke-linecap=\"${rect.strokeLinecap}\" stroke-linejoin=\"${rect.strokeLinejoin}\" transform=\"${renderTransform(rect.transform, config)}\" opacity=\"${rect.opacity}\" visibility=\"${rect.visibility}\" ${config.exceptID ? '' : ` id=\"${rect.id}\" `}/>`;\n    }\n\n    function renderCircle(circle: circle, plane: plane): string {\n      return `<circle cx=\"${circle.cx + plane.x}\" cy=\"${circle.cy + plane.y}\" r=\"${circle.r}\" fill=\"${circle.fill}\" stroke=\"${circle.stroke}\" stroke-width=\"${circle.strokeWidth}\" stroke-dasharray=\"${circle.strokeDasharray}\" stroke-linecap=\"${circle.strokeLinecap}\" stroke-linejoin=\"${circle.strokeLinejoin}\" transform=\"${renderTransform(circle.transform, config)}\" opacity=\"${circle.opacity}\" visibility=\"${circle.visibility}\" ${config.exceptID ? '' : ` id=\"${circle.id}\" `}/>`;\n    }\n\n    function renderEllipse(ellipse: ellipse, plane: plane): string {\n      return `<ellipse cx=\"${ellipse.cx + plane.x}\" cy=\"${ellipse.cy + plane.y}\" rx=\"${ellipse.rx}\" ry=\"${ellipse.ry}\" fill=\"${ellipse.fill}\" stroke=\"${ellipse.stroke}\" stroke-width=\"${ellipse.strokeWidth}\" stroke-dasharray=\"${ellipse.strokeDasharray}\" stroke-linecap=\"${ellipse.strokeLinecap}\" stroke-linejoin=\"${ellipse.strokeLinejoin}\" transform=\"${renderTransform(ellipse.transform, config)}\" opacity=\"${ellipse.opacity}\" visibility=\"${ellipse.visibility}\" ${config.exceptID ? '' : ` id=\"${ellipse.id}\" `}/>`;\n    }\n\n    function renderLine(line: line, plane: plane): string {\n      return `<line x1=\"${line.x1 + plane.x}\" y1=\"${line.y1 + plane.y}\" x2=\"${line.x2 + plane.x}\" y2=\"${line.y2 + plane.y}\" stroke=\"${line.stroke}\" stroke-width=\"${line.strokeWidth}\" stroke-dasharray=\"${line.strokeDasharray}\" stroke-linecap=\"${line.strokeLinecap}\" stroke-linejoin=\"${line.strokeLinejoin}\" transform=\"${renderTransform(line.transform, config)}\" opacity=\"${line.opacity}\" visibility=\"${line.visibility}\" ${config.exceptID ? '' : ` id=\"${line.id}\" `}/>`;\n    }\n\n    function renderPolyline(polyline: polyline, plane: plane): string {\n      return `<polyline points=\"${renderPoints(polyline.points, plane)}\" stroke=\"${polyline.stroke}\" stroke-width=\"${polyline.strokeWidth}\" stroke-dasharray=\"${polyline.strokeDasharray}\" stroke-linecap=\"${polyline.strokeLinecap}\" stroke-linejoin=\"${polyline.strokeLinejoin}\" transform=\"${renderTransform(polyline.transform, config)}\" opacity=\"${polyline.opacity}\" visibility=\"${polyline.visibility}\" ${config.exceptID ? '' : ` id=\"${polyline.id}\" `}/>`;\n    }\n\n    function renderPolygon(polygon: polygon, plane: plane): string {\n      return `<polygon points=\"${renderPoints(polygon.points, plane)}\" fill=\"${polygon.fill}\" stroke=\"${polygon.stroke}\" stroke-width=\"${polygon.strokeWidth}\" stroke-dasharray=\"${polygon.strokeDasharray}\" stroke-linecap=\"${polygon.strokeLinecap}\" stroke-linejoin=\"${polygon.strokeLinejoin}\" transform=\"${renderTransform(polygon.transform, config)}\" opacity=\"${polygon.opacity}\" visibility=\"${polygon.visibility}\" ${config.exceptID ? '' : ` id=\"${polygon.id}\" `}/>`;\n    }\n\n    function renderPath(path: path, plane: plane): string {\n      return `<path d=\"${renderD(path.d, plane)}\" fill=\"${path.fill}\" stroke=\"${path.stroke}\" stroke-width=\"${path.strokeWidth}\" stroke-dasharray=\"${path.strokeDasharray}\" stroke-linecap=\"${path.strokeLinecap}\" stroke-linejoin=\"${path.strokeLinejoin}\" transform=\"${renderTransform(path.transform, config)}\" opacity=\"${path.opacity}\" visibility=\"${path.visibility}\" ${config.exceptID ? '' : ` id=\"${path.id}\" `}/>`;\n    }\n\n    for (var element of plane.elements) {\n      switch (element?.type) {\n        case 'rect':\n          result += renderRect(element, plane);\n          break;\n        case 'circle':\n          result += renderCircle(element, plane);\n          break;\n        case 'ellipse':\n          result += renderEllipse(element, plane);\n          break;\n        case 'line':\n          result += renderLine(element, plane);\n          break;\n        case 'polyline':\n          result += renderPolyline(element, plane);\n          break;\n        case 'polygon':\n          result += renderPolygon(element, plane);\n          break;\n        case 'path':\n          result += renderPath(element, plane);\n          break;\n        default:\n          break;\n      }\n    }\n\n    for (var subPlane of plane.subPlanes) {\n      result += renderElements(subPlane, config);\n    }\n\n    return `<g${config.exceptID ? '' : ` id=\"${plane.id}\"`}>${result}</g>`;\n  }\n  return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${plane.width}\" height=\"${plane.height}\" viewBox=\"0 0 ${plane.width} ${plane.height}\">${renderElements(plane, config)}</svg>`;\n}\n","import { translate, scale, rotate, skewX, skewY, matrix, rad, transform, point, points } from '../attributes/index';\n\nexport function createTranslationMatrix(translate: translate): matrix {\n  return [\n    [1, 0, translate.x],\n    [0, 1, translate.y],\n    [0, 0, 1]\n  ];\n}\n\nexport function createScalingMatrix(scale: scale): matrix {\n  return [\n    [scale.x, 0, 0],\n    [0, scale.y, 0],\n    [0, 0, 1]\n  ];\n}\n\nexport function createRotationMatrix(rotate: rotate): matrix {\n  const rad: rad = (rotate.deg * Math.PI) / 180;\n  return [\n    [Math.cos(rad), -Math.sin(rad), 0],\n    [Math.sin(rad), Math.cos(rad), 0],\n    [0, 0, 1]\n  ];\n}\n\nexport function createSkewXMatrix(skewX: skewX): matrix {\n  const rad: rad = (skewX.deg * Math.PI) / 180;\n  return [\n    [1, Math.tan(rad), 0],\n    [0, 1, 0],\n    [0, 0, 1]\n  ];\n}\n\nexport function createSkewYMatrix(skewY: skewY): matrix {\n  const rad: rad = (skewY.deg * Math.PI) / 180;\n  return [\n    [1, 0, 0],\n    [Math.tan(rad), 1, 0],\n    [0, 0, 1]\n  ];\n}\n\nexport function multiplyMatrices(a: matrix, b: matrix): matrix {\n  var result: matrix = [\n    [0, 0, 0],\n    [0, 0, 0],\n    [0, 0, 0]\n  ];\n\n  for (var i = 0; i < 3; i++) {\n    for (var j = 0; j < 3; j++) {\n      for (var k = 0; k < 3; k++) {\n        result[i][j] += a[i][k] * b[k][j];\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function createTransformationMatrix(transform: transform): matrix {\n  var identityMatrix: matrix = [\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1]\n  ];\n  var transformLength = transform.length;\n\n  for (var i = 0; i < transformLength; i++) {\n    var transformationMatrix: matrix;\n    switch (transform[i]?.type) {\n      case 'translate':\n        transformationMatrix = createTranslationMatrix(transform[i]);\n        break;\n      case 'scale':\n        transformationMatrix = createScalingMatrix(transform[i]);\n        break;\n      case 'rotate':\n        transformationMatrix = createRotationMatrix(transform[i]);\n        break;\n      case 'skewX':\n        transformationMatrix = createSkewXMatrix(transform[i]);\n        break;\n      case 'skewY':\n        transformationMatrix = createSkewYMatrix(transform[i]);\n        break;\n      default:\n        transformationMatrix = [\n          [1, 0, 0],\n          [0, 1, 0],\n          [0, 0, 1]\n        ];\n        break;\n    }\n    identityMatrix = multiplyMatrices(transformationMatrix, identityMatrix);\n  }\n  return identityMatrix; // return a new \"identity\" matrix\n}\n\nexport function transformPoints(points: points, transform: transform): points {\n  function applyTransformationMatrix(matrix: matrix, point: point): point {\n    const [x, y, _] = [matrix[0][0] * point.x + matrix[0][1] * point.y + matrix[0][2], matrix[1][0] * point.x + matrix[1][1] * point.y + matrix[1][2], 1];\n    return { x, y };\n  }\n  const transformationMatrix = createTransformationMatrix(transform);\n  return points.map((point) => applyTransformationMatrix(transformationMatrix, point));\n}\n","import { createVectorDocument, openDocument, vectorDocument } from '../editor/index';\n\nconst newDocumentElement: HTMLElement = document.querySelector('.css_new_document');\nconst newDocumentModalOverlayElement: HTMLElement = document.querySelector('.css_new_document_modal_overlay');\n\nexport function openNewDocument(): void {\n  newDocumentElement.setAttribute('displayed', true);\n  newDocumentModalOverlayElement.setAttribute('displayed', true);\n}\n\nexport function closeNewDocument(): void {\n  newDocumentElement.setAttribute('displayed', false);\n  newDocumentModalOverlayElement.setAttribute('displayed', false);\n}\n\nexport function createDocumentWithInputs(): void {\n  const name: string = String(newDocumentElement.querySelector('#new_document_name').value) || 'Untitled';\n  const width: number = parseInt(newDocumentElement.querySelector('#new_document_width').value) || 64;\n  const height: number = parseInt(newDocumentElement.querySelector('#new_document_height').value) || 64;\n  var creation: vectorDocument = createVectorDocument(width, height, null, null, name);\n  openDocument(creation.id);\n}\n","let lazyCSS = {\n  noto_sans_tc: false,\n  material_symbols: false\n};\n\nexport function loadCSS(url: string, identifier: string): void {\n  if (lazyCSS[identifier] === false) {\n    const link = document.createElement('link');\n    link.setAttribute('href', url);\n    link.setAttribute('rel', 'stylesheet');\n    document.head.appendChild(link);\n    lazyCSS[identifier] = true;\n  }\n}\n","import { createTransformationMatrix, transformPoints } from './graphic/transformation/index';\nimport { buildRect } from './graphic/elements/rect';\nimport { buildCircle } from './graphic/elements/circle';\nimport { buildPlane } from './graphic/plane/index';\nimport { renderPlaneAsXML } from './graphic/render/index';\nimport { initializeTools, switchTool } from './editor/tools/index';\nimport { initializeEditor } from './editor/index';\nimport { openNewDocument, closeNewDocument, createDocumentWithInputs } from './new_document/index';\nimport { switchShapeType } from './editor/tools/shape';\nimport { loadCSS } from './utilities/lazy-css';\nimport { buildPathFromElement, samplePath } from './graphic/elements/path';\n\nimport './theme.css';\nimport './index.css';\nimport './icons.css';\n\nimport './home/index.css';\n\nimport './new_document/index.css';\n\nimport './editor/index.css';\nimport './editor/planes.css';\nimport './editor/tools/index.css';\nimport './editor/tools/shape.css';\n\nwindow.vector = {\n  test: {\n    createTransformationMatrix,\n    transformPoints,\n    r: function () {\n      var plane0 = buildPlane(0, 0, 300, 300, true);\n      var rect0 = buildRect(\n        10,\n        20,\n        50,\n        80,\n        10,\n        10,\n        '#000',\n        null,\n        null,\n        null,\n        null,\n        null,\n        [\n          { type: 'rotate', deg: 20 },\n          { type: 'translate', x: 90, y: 40 }\n        ],\n        1,\n        null\n      );\n      plane0.elements.push(rect0);\n      var plane1 = buildPlane(5, 5, 60, 60, false, null, null);\n      var rect1 = buildRect(5, 5, 50, 50, 5, 5, '#000');\n      var circle0 = buildCircle(0, 0, 20, 20, 20, '#000', null, null, null, null, null, [{ type: 'scale', x: 1.5, y: 1.2 }], 0.8, null);\n      plane1.elements.push(rect1);\n      plane1.elements.push(circle0);\n      plane0.subPlanes.push(plane1);\n      console.log(JSON.stringify(plane0));\n      console.log(\n        renderPlaneAsXML(plane0, {\n          flattenTransform: false,\n          exceptID: false\n        })\n      );\n      for (const element of plane1.elements) {\n        try {\n          let p = buildPathFromElement(element);\n          console.log(element);\n          console.log(p);\n          let P = samplePath(p, 1, true);\n          console.log(P);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    }\n  },\n  toolbar: {\n    switchTool,\n    switchShapeType\n  },\n  documents: {\n    newDocument: {\n      openNewDocument,\n      closeNewDocument,\n      createDocumentWithInputs\n    }\n  },\n  initialize: function () {\n    initializeTools();\n    initializeEditor();\n    console.log(0);\n  },\n  secondlyInitialize: function () {\n    loadCSS('https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@100..900&display=swap', 'noto_sans_tc');\n    loadCSS('https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200', 'material_symbols');\n  }\n};\n\nexport default window.vector;\n","export const { v4: uuidv4 } = require('uuid');\n"],"names":["buildCircle","x","y","cx","cy","r","fill","stroke","strokeWidth","strokeDasharray","strokeLinecap","strokeLinejoin","transform","opacity","visibility","id","uuidv4","type","buildEllipse","rx","ry","buildLine","x1","y1","x2","y2","buildPath","d","samplePath","path","_points","_points2","_points3","_points4","_points5","_points6","_points7","_points8","precision","arguments","length","undefined","flatten","points","interpolateLinear","p0","p1","segmentPoints","step","Math","hypot","i","t","min","max","push","interpolateCubicBezier","c1","c2","pow","interpolateQuadraticBezier","c","interpolateArc","xAxisRotation","largeArcFlag","sweepFlag","distance","round","rotationRad","PI","cosRot","cos","sinRot","sin","dx","dy","x1p","y1p","rxSq","rySq","x1pSq","y1pSq","radicant","coef","sqrt","cxp","cyp","theta1","atan2","deltaTheta","adjustedDeltaTheta","finalDeltaTheta","theta","_step","currentPoint","previousControlPoint","_iterator","_createForOfIteratorHelper","s","n","done","command","value","lineEnd","apply","_toConsumableArray","horizontalEnd","verticalEnd","cubicStart","cubicControl1","cubicControl2","cubicEnd","smoothStart","smoothControl1","smoothControl2","smoothEnd","quadStart","quadControl","quadEnd","smoothQuadStart","smoothQuadControl","smoothQuadEnd","Error","concat","err","e","f","_typeof","Array","isArray","transformPoints","smoothPath","simplifiedPoints","simplifyPoints","tolerance","distanceToSegment","point","start","end","closestPoint","dmax","index","leftPoints","slice","rightPoints","simplifiedLeft","simplifiedRight","simplifiedPointsLength","simplifiedCommands","currentSimplifiedPoint","nextSimplifiedPoint","buildPathFromElement","element","polyToCommands","_step2","commands","_iterator2","width","height","rectToCommands","circleToCommands","ellipseToCommands","lineToCommands","buildPolygon","buildPolyline","buildRect","buildPlane","root","elements","subPlanes","renderPlaneAsXML","plane","config","renderElements","result","renderTransform","flattenTransform","transformationMatrix","createTransformationMatrix","transformLength","_transform$i","deg","join","renderPoints","map","renderRect","rect","rectWidth","abs","rectHeight","rectX","rectY","exceptID","renderCircle","circle","renderEllipse","ellipse","renderLine","line","renderPolyline","polyline","renderPolygon","polygon","renderPath","_command","renderD","_element","_step3","_iterator3","createSkewXMatrix","skewX","rad","tan","createSkewYMatrix","skewY","multiplyMatrices","a","b","j","k","rotate","scale","translate","identityMatrix","matrix","applyTransformationMatrix","newDocumentElement","document","querySelector","newDocumentModalOverlayElement","lazyCSS","noto_sans_tc","material_symbols","loadCSS","url","identifier","link","createElement","setAttribute","head","appendChild","window","vector","test","plane0","rect0","plane1","rect1","circle0","console","log","JSON","stringify","p","P","toolbar","switchTool","switchShapeType","documents","newDocument","openNewDocument","closeNewDocument","createDocumentWithInputs","name","String","parseInt","creation","createVectorDocument","openDocument","initialize","initializeTools","initializeEditor","secondlyInitialize","require","v4"],"sourceRoot":""}